apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: wait4job
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
rules:
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: wait4job
rules:
- apiGroups:
  - batch
  resources:
  - jobs/status
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: travisci-platform-rabbitmq-ha
subjects:
- kind: ServiceAccount
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: wait4job
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: wait4job
subjects:
- kind: ServiceAccount
  name: wait4job
---
apiVersion: v1
data:
  enabled_plugins: "[\n  rabbitmq_shovel,\n  rabbitmq_shovel_management,\n  rabbitmq_federation,\n
    \ rabbitmq_federation_management,\n  \n\n  rabbitmq_consistent_hash_exchange,\n
    \ rabbitmq_management,\n  rabbitmq_peer_discovery_k8s\n  \n].\n"
  rabbitmq.conf: |
    ## RabbitMQ configuration
    ## Ref: https://github.com/rabbitmq/rabbitmq-server/blob/master/docs/rabbitmq.conf.example

    ## Authentification

    ## Clustering
    cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
    cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
    cluster_formation.k8s.address_type = hostname
    cluster_formation.node_cleanup.interval = 10
    # Set to false if automatic cleanup of absent nodes is desired.
    # This can be dangerous, see http://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup.
    cluster_formation.node_cleanup.only_log_warning = true
    cluster_partition_handling = autoheal

    management.load_definitions = /etc/definitions/definitions.json

    ## Memory-based Flow Control threshold
    vm_memory_high_watermark.absolute = 256MB

    ## Auth HTTP Backend Plugin

    ## LDAP Plugin

    ## MQTT Plugin

    ## Web MQTT Plugin

    ## STOMP Plugin

    ## Web STOMP Plugin

    ## Prometheus Plugin

    ## AMQPS support
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
---
apiVersion: v1
data:
  master.conf: |-
    dir /data
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
  redis.conf: |-
    # User-supplied configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  replica.conf: |-
    dir /data
    slave-read-only yes
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-redis
  namespace: tci-enterprise-kots
---
apiVersion: v1
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_PASSWORD $no_auth_warning \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    no_auth_warning=$([[ "$(redis-cli --version)" =~ (redis-cli 5.*) ]] && echo --no-auth-warning)
     response=$(
      timeout -s 3 $1 \
      redis-cli \
        -a $REDIS_MASTER_PASSWORD $no_auth_warning \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-redis-health
  namespace: tci-enterprise-kots
---
apiVersion: v1
data:
  GITHUB_CLIENT_ID: fd1b19d9a453a5b9b62b
  GITHUB_SCOPES: read:org repo:status repo_deployment user:email write:repo_hook
  GITHUB_SERVICE_HOOK_URL: notify.ext-dev-1-test.travis-ci-enterprise.com
  PORT: "3333"
  RAILS_ENV: production
  RAILS_LOG_TO_STDOUT: "true"
  RAILS_SERVE_STATIC_FILES: "true"
  TRAVIS_API_ENDPOINT: https://ext-dev-1-test.travis-ci-enterprise.com/api
  TRAVIS_ENTERPRISE: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: admin-config
---
apiVersion: v1
data:
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_APPS_ID: "197776"
  PORT: "4000"
  RACK_ENV: production
  TRAVIS_BUILD_APT_MIRRORS_UNKNOWN: http://archive.ubuntu.com/ubuntu/
  TRAVIS_BUILD_APT_WHITELIST_SKIP: "true"
  TRAVIS_BUILD_AUTH_DISABLED: "true"
  TRAVIS_MAVEN_CENTRAL_MIRROR: http://archive.ubuntu.com/ubuntu/
  TRAVIS_WAIT_FOR_NETWORK_CHECK: "false"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: build-config
---
apiVersion: v1
data: null
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: certpem-config
---
apiVersion: v1
data:
  distribution: gke
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: distribution-config
---
apiVersion: v1
data:
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_APPS_ID: "197776"
  RACK_ENV: production
  REDIS_GATEKEEPER_ENABLED: "true"
  REPLICATED_INTEGRATIONAPI: http://titled:3000
  TRAVIS_GATEKEEPER_LOGS_API_URL: http://travis-logs
  TRAVIS_GATEKEEPER_PUSHER_LOG_ID_ENABLED: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: gatekeeper-config
---
apiVersion: v1
data:
  ENV: production
  INSIGHTS_ENABLED: "true"
  INSIGHTS_REDIS_ENABLED: "true"
  RACK_ENV: production
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: hub-config
---
apiVersion: v1
data:
  PGDATABASE: travis_insights_production
  PGHOST: travisci-platform-insights-postgresql-headless
  PGPORT: "5432"
  PGUSER: postgres
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: insights-db-config
---
apiVersion: v1
data:
  ENV: production
  RACK_ENV: production
  REDIS_GATEKEEPER_ENABLED: "true"
  WEB_CONCURRENCY: "4"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: listener-config
---
apiVersion: v1
data:
  ENV: production
  PORT: "3000"
  RACK_ENV: production
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: live-config
---
apiVersion: v1
data:
  ENV: production
  PORT: "5555"
  RACK_ENV: production
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: logs-config
---
apiVersion: v1
data:
  PGDATABASE: logsdb
  PGHOST: travisci-platform-logs-postgresql-headless
  PGPORT: "5432"
  PGUSER: postgres
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: logs-db-config
---
apiVersion: v1
data:
  platform_sql_schema_22.sh: |
    #!/usr/bin/env bash
    #set -e
    echo 'Running SQL dump from enterprise-2.2';

    table_exists()
    {
      pgresult=`psql -U $PGUSER -p $PGPORT -h $PGHOST -d $PGDATABASE -tAc "select count(*) from information_schema.tables where table_schema='public' and table_name='branches';"`
      if [ $? -eq 0 ]; then
        echo $pgresult
      else
        echo $1
      fi
    }

    if [ $(table_exists) -eq 0 ]; then

      echo 'DOWNLOADING 2.2 DUMP';
      curl  -o platform_sql_schema_22.sql -s ;

      echo 'LOADING 2.2 DUMP';
      psql -U $PGUSER -p $PGPORT -h $PGHOST -d $PGDATABASE -f platform_sql_schema_22.sql;

      echo 'ADDING INDEX';
      psql -U $PGUSER -p $PGPORT -d $PGDATABASE -h $PGHOST  -tAc"CREATE INDEX index_builds_on_repository_id_and_id_desc ON builds USING btree (repository_id, id DESC);"
    fi
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: migrations-config
---
apiVersion: v1
data:
  log_sql_schema_22.sh: |
    #!/usr/bin/env bash
    set -e
    echo 'Running SQL dump from enterprise-2.2';

    table_exists()
    {
      pgresult=`psql -U $PGUSER -p $PGPORT -h $PGHOST -d $PGDATABASE -tAc "select count(*) from information_schema.tables where table_schema='public' and table_name='logs';"`
      if [ $? -eq 0 ]; then
        echo $pgresult
      else
        echo 1
      fi
    }

    if [ $(table_exists) -eq 0 ]; then
      curl  -o log_sql_schema_22.sql -s ;
      psql -U $PGUSER -p $PGPORT -h $PGHOST -d $PGDATABASE -f log_sql_schema_22.sql;
    fi
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: migrations-logs-config
---
apiVersion: v1
data:
  nginx.conf: "daemon off;\nworker_processes 5;\n\nevents {\n}\n\nstream {\n  resolver
    kube-dns.kube-system.svc.cluster.local;\n  resolver_timeout 20s;\n\n  upstream
    stream_backend {\n      server travisci-platform-rabbitmq-ha:5672;\n  }\n\n  server
    {\n      proxy_pass            stream_backend;\n      \n      listen                5672;\n
    \     \n  }\n}\n\nhttp {\n\n  resolver kube-dns.kube-system.svc.cluster.local;\n
    \ resolver_timeout 20s;\n\n  \n  server {\n    listen 80;\n\n    server_name _;\n\n
    \   return 301 https://$host$request_uri;\n  }\n  \n\n  server {\n    \n    listen
    3333 ssl;\n    include conf/nginx-ssl.conf;\n    \n\n    location / {\n        proxy_pass
    http://travis-admin:3333/;\n        proxy_redirect off;\n        proxy_set_header
    X-Scheme https;\n        proxy_set_header X-Forwarded-Proto https;\n        proxy_buffering
    off;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP
    $remote_addr;\n        proxy_set_header X-Forwarded-Host $http_host;\n        proxy_set_header
    X-Forwarded-For $proxy_add_x_forwarded_for;\n      }\n  }\n\n  server {\n    \n
    \   listen 443 ssl;\n    include conf/nginx-ssl.conf;\n    \n\n    server_name
    \  ext-dev-1-test.travis-ci-enterprise.com;\n\n    location = /_healthz {\n      add_header
    Content-Type text/plain;\n      return 200 'ok';\n    }\n\n    proxy_set_header
    X-Scheme https;\n    proxy_set_header X-Forwarded-Proto https;\n    proxy_buffering
    off;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header
    X-Real-IP $remote_addr;\n    proxy_set_header Host $http_host;\n\n    location
    ^~ /slanger-api/ {\n      proxy_pass http://slanger:4567/;\n    }\n\n    location
    ^~ /slanger-ws/ {\n      proxy_pass http://slanger:8080/;\n\n      proxy_http_version
    1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection
    upgrade;\n\n      proxy_read_timeout 86400s;\n      proxy_send_timeout 86400s;\n
    \   }\n\n    location ^~ /__build__/ {\n      proxy_pass http://travis-build/;\n
    \   }\n\n    location ^~ /amqp_ui/ {\n        proxy_pass http://travisci-platform-rabbitmq-ha:15672/;\n
    \   }\n\n\n    location ^~ /api/ {\n        rewrite ^ $request_uri;\n        rewrite
    ^/api/(.*) $1 break;\n        return 400; # if the second rewrite won't match,
    error for security reasons\n        proxy_pass http://travis-api.tci-enterprise-kots.svc.cluster.local/$uri;\n
    \       proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n
    \       proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-For
    $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n
    \       proxy_set_header X-Script-Name /api;\n    }\n\n    location ^~ /__logs__/
    {\n      proxy_pass http://travis-logs/;\n    }\n\n    location ^~ /listener/
    {\n        proxy_pass http://travis-listener/;\n    }\n\n    location ^~ /vcs-listener/
    {\n        proxy_pass http://travis-vcs-listener/;\n        proxy_set_header X-Request-Id
    $request_id;\n    }\n\n    location / {\n        proxy_pass http://travis-web;\n
    \       proxy_read_timeout 360s;\n        proxy_max_temp_file_size  0;\n\n        proxy_redirect
    off;\n\n        if ($args ~ DOCUMENT_ROOT|_SERVER|_REQUEST) {\n            return
    404;\n            break;\n        }\n\n        if (!-f $request_filename) {\n
    \           proxy_pass http://travis-web;\n            break;\n        }\n    }\n\n
    \ }\n\n  error_log /dev/stdout;\n  access_log /dev/stdout;\n}\n"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: nginx
---
apiVersion: v1
data:
  nginx-ssl.conf: |2

    ssl_certificate       /opt/certs/tls.crt;
    ssl_certificate_key   /opt/certs/tls.key;
    ssl_protocols         SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers           HIGH:!aNULL:!MD5;
    ssl_session_cache     shared:SSL2:20m;
    ssl_session_timeout   4h;
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: nginx-ssl
---
apiVersion: v1
data:
  pg_wait.sh: |
    until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDATABASE
    do
      echo waiting for database;
      sleep 2;
    done;
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: postgres
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: pg-wait-config
---
apiVersion: v1
data:
  PGDATABASE: platformdb
  PGHOST: travisci-platform-platform-postgresql-headless
  PGPORT: "5432"
  PGUSER: postgres
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: platform-db-config
---
apiVersion: v1
data:
  AMQP_QUEUE_VALIDATION: "true"
  ENV: production
  IBM_REPO_SWITCHES_DATE: "2022-03-01"
  RACK_ENV: production
  TRAVIS_HOST: ext-dev-1-test.travis-ci-enterprise.com
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: scheduler-config
---
apiVersion: v1
data:
  REDIS_DB: "0"
  TRAVIS_HOSTNAME: ext-dev-1-test.travis-ci-enterprise.com
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: slanger
---
apiVersion: v1
data:
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_APPS_ID: "197776"
  GITHUB_STATUS_LEGACY_NAME: "false"
  JWT_RSA_PUBLIC_KEY: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEwTG9ESzNRdDZUOGQyc0Jlb201dwoyNFNHY25KSjlxTlBFK25EWGUyU2xyM0F6U3p0a3U5QitwVWJ2T2pHNlpSQ0QwakdRVHZwczltNlhXT3ArWkU4Ck9CT1FWNVdJaG04K25lWm5IRGJkWjJHUS9qU0ptTUdxNzBCRE4xeEZnaFN2VnJLTzJEZDJLZXErMklmeWxoeTkKbU9kTGVQZ1BFZWZOWGgzTEduUGcwUlErL0pZT0ZWaEJvWEpPMGdGWmVpQ2FnNXg2ZlRKZUhqSURxZGZHUVVGUwpRdk5DTGJHRm5vZEc5ZUhrVUFwTmIvMk1GYnVDUFB0NnBlMlhQL1lRY3lCNlp6OHV2WHVzOGxQNFlpUlJ1LzE0Cml5YS9zbkJUdFNyOS8wNE9rS3hYaGMzL1E1ZFMrUUZ1Z0FXUk14NUh1MGlGd3cyUlpvbmlJd24rWW5GaEhBdk8KMjJnbk5GWlFiRlVSbjgrSGtPaUkvMEVreHg0NHp2MHcrdm5pWWtsRmRydXdxWWNGbjdGTzVxK3ZZLzhLWUpPVApQaUNvSkZlOTEyemdVNHNtRnBadmt2b2NiRm5kUVJMZ2lRZkx6U0E5QUlHTEdaZU1QUFpydHpmck9RUGxNUlhUClFkUDVOQVdhbjN2T29lRE9tMktoc3BacElTYnk1ajI5NUU3WFZqWkRudFk0TFlZbUMzZ1VLenp0RzlyNys2TU0KNmQ0WkVDZzdQdGI2Mm1uUmtjd0c1NlJIS2dRZzhQZ3hBVFpTRTNQU3RYcDFBc0VZZTh0R3QwbFZheCs5YnFFdQpERW12dS95Z2xJWmF6dU1YWDRxb1MwRGsrMVJyTFBkanU5UzVuU2dSK2hTNlNsUkZha1VIYzloR1hjNnZXUjlkCnJLcjBHdzVPUlA3TTFid3A0bDFFMGNVQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==
  RACK_ENV: production
  TRAVIS_HOSTNAME: ext-dev-1-test.travis-ci-enterprise.com
  TRAVIS_SKIP_GITHUB_MAX_MESSAGES: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: tasks-config
---
apiVersion: v1
data:
  DOCKER: "1"
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_APPS_ID: "197776"
  IBM_REPO_SWITCHES_DATE: "2022-03-01"
  LOGS_API_ENABLED: "true"
  LOGS_API_URL: http://travis-logs
  RACK_ENV: production
  REPLICATED_INTEGRATIONAPI: http://titled:3000
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-api
---
apiVersion: v1
data:
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_APPS_ID: "197776"
  GITHUB_SYNC_MAX_CONCURRENCY: "15"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-github-sync
---
apiVersion: v1
data:
  ENV: production
  RACK_ENV: production
  RAILS_ENV: production
  TRAVIS_SITE: ext-dev-1-test.travis-ci-enterprise.com
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-insights
---
apiVersion: v1
data:
  API_ENDPOINT: https://ext-dev-1-test.travis-ci-enterprise.com/api
  CHARM_KEY: ""
  DEFAULT_PROVIDER: github
  ENABLE_FEATURE_FLAGS: enable-github-login
  ENV: production
  GA_CODE: ""
  GITHUB_APPS_APP_NAME: TCIE-App-test-2
  GITHUB_APPS_NAME: TCIE-App-test-2
  GITHUB_ORGS_OAUTH_ACCESS_SETTINGS_URL: https://github.com/apps/TCIE-App-test-2/installations/new
  PORT: "8080"
  PUBLIC_MODE: "false"
  PUSHER_CHANNEL_PREFIX: private-
  PUSHER_HOST: ext-dev-1-test.travis-ci-enterprise.com
  PUSHER_PATH: slanger-ws
  RACK_ENV: production
  SITE_TITLE: Travis CI - Enterprise
  SOURCE_ENDPOINT: https://github.com
  TRAVIS_ENTERPRISE: "true"
  TRAVIS_PRO: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-web
---
apiVersion: v1
data:
  ASSEMBLA_CLIENT_ID: ""
  ASSEMBLA_SERVICE_HOOK_URL: https://ext-dev-1-test.travis-ci-enterprise.com/vcs-listener/webhooks/assembla/receive
  BITBUCKET_CLIENT_ID: ""
  BITBUCKET_SERVICE_HOOK_URL: https://ext-dev-1-test.travis-ci-enterprise.com/vcs-listener/webhooks/bitbucket/receive
  CLIENT_DOMAIN: ext-dev-1-test.travis-ci-enterprise.com
  DEFAULT_QUEUE_NAME: travis_vcs_production_default
  ENV: production
  GITHUB_API_ENDPOINT: https://api.github.com
  GITHUB_API_URL: https://api.github.com
  GITHUB_APPS_ID: "197776"
  GITHUB_AUTHORIZATION_SERVER: https://github.com
  GITHUB_CLIENT_ID: fd1b19d9a453a5b9b62b
  GITHUB_SCOPES: read:org repo user:email
  GITHUB_SERVICE_HOOK_URL: notify.ext-dev-1-test.travis-ci-enterprise.com
  GITHUB_URL: https://github.com
  GITLAB_API_URL: https://gitlab.com/api/v4
  GITLAB_AUTHORIZATION_SERVER: https://gitlab.com
  GITLAB_CLIENT_ID: ""
  GITLAB_HOSTNAME: gitlab.com
  GITLAB_SERVICE_HOOK_URL: https://ext-dev-1-test.travis-ci-enterprise.com/vcs-listener/webhooks/gitlab/receive
  GITLAB_URL: https://gitlab.com
  GITLAB_VERIFY_SSL: "true"
  JOB_QUEUE_NAME: default
  PORT: "3030"
  RACK_ENV: production
  RAILS_LOG_TO_STDOUT: enabled
  RAILS_SERVE_STATIC_FILES: enabled
  SSL_VERIFY: "false"
  TRAVIS_ENTERPRISE: "true"
  WITHOUT_FORCE_SSL: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: vcs-config
---
apiVersion: v1
data:
  DEFAULT_QUEUE_NAME: travis_vcs_list_production_default
  ENV: production
  PORT: "3000"
  RACK_ENV: production
  RAILS_LOG_TO_STDOUT: enabled
  RAILS_SERVE_STATIC_FILES: enabled
  REDIS_GATEKEEPER_ENABLED: "true"
  VCS_URL: http://travis-vcs
  WITHOUT_FORCE_SSL: "true"
  sync: "1"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: vcs-listener-config
---
apiVersion: v1
data:
  ENV: production
  PORT: "3000"
  RACK_ENV: production
  TRAVIS_DEFAULT_DIST: bionic
  TRAVIS_ENTERPRISE: "true"
kind: ConfigMap
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: yml-config
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJwcm94eS5yZXBsaWNhdGVkLmNvbSI6eyJhdXRoIjoiTWpob1VIaE5PWFl6WXpVNVpWWk1aVUpWUzJ4amVrNXdURzR6T2pJNGFGQjRUVGwyTTJNMU9XVldUR1ZDVlV0c1kzcE9jRXh1TXc9PSJ9LCJyZWdpc3RyeS5yZXBsaWNhdGVkLmNvbSI6eyJhdXRoIjoiTWpob1VIaE5PWFl6WXpVNVpWWk1aVUpWUzJ4amVrNXdURzR6T2pJNGFGQjRUVGwyTTJNMU9XVldUR1ZDVlV0c1kzcE9jRXh1TXc9PSJ9fX0=
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-9999"
    kots.io/app-slug: tci-enterprise-kots
  creationTimestamp: null
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: kotsadm-replicated-registry
  namespace: tci-enterprise-kots
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJwcm94eS5yZXBsaWNhdGVkLmNvbSI6eyJhdXRoIjoiTWpob1VIaE5PWFl6WXpVNVpWWk1aVUpWUzJ4amVrNXdURzR6T2pJNGFGQjRUVGwyTTJNMU9XVldUR1ZDVlV0c1kzcE9jRXh1TXc9PSJ9LCJyZWdpc3RyeS5yZXBsaWNhdGVkLmNvbSI6eyJhdXRoIjoiTWpob1VIaE5PWFl6WXpVNVpWWk1aVUpWUzJ4amVrNXdURzR6T2pJNGFGQjRUVGwyTTJNMU9XVldUR1ZDVlV0c1kzcE9jRXh1TXc9PSJ9fX0=
kind: Secret
metadata:
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-9999"
    kots.io/app-slug: tci-enterprise-kots
  creationTimestamp: null
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: tci-enterprise-kots-registry
  namespace: tci-enterprise-kots
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpfMVVjaFIwQW9TakxjQVpfQHRyYXZpc2NpLXBsYXRmb3JtLXBsYXRmb3JtLXBvc3RncmVzcWwtaGVhZGxlc3M6NTQzMi9wbGF0Zm9ybWRi
  GITHUB_CLIENT_SECRET: ZGI5ZDQ1M2NkM2IxNmNhYTMzOWFlNDAzZjY0OWIzMzExMjgzZmIyNg==
  REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  SECRET_KEY_BASE: aXY5R1hNOHYxcGdCSTVHMUFHc1RTb2RGNTJyT01DcTNPTjkzNkQ2RnVraDdIRUw5OTJ0MEx6ZkQ4WXB1YTZGMkx4ZFRUSWNuSmQzUVo4YjNKck1TNFZvWkpPTVNBR0N4cmMzVVJyZlhKYVNpazBUcTVickVaRGx3RUJvam5UOWtIdW1aWUFodFJLdXUzUjVJcktDeWpaUnE4c1BxR2VTTjdSUFMwc0dxb3Z2aW9VZW5ad3BVME0wYWR5VlZuRTNycUg1U3ptTjBNQnp4d3Z2MVU5U05XRlNuWTVTWWtWaUxIM0ZuTFBLM2xxN3JkeTQ4T3RlYTdKbmpPM0JycDM4SA==
  TRAVIS_API_TOKEN: SVJySm84S1R5R0dSWVhYOGxtWUVUY3lIMWxxaFpQU0JJY21pcDF2U2dFVzVXMzZLWUlKcUdNMW1iZ3NRakNWUQ==
  VCS_API_AUTH_TOKEN: WThlWFN6Z3N2bHM3TjBvcU9lS0t1czRCcGpNNWFDa1U=
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: admin-secret
type: Opaque
---
apiVersion: v1
data:
  GITHUB_PRIVATE_PEM: |
    TUlJRW9nSUJBQUtDQVFFQXdrUUE1Nkl5UXdMVTNyWjk5VGo0UXBJVmdTMSt3R0F5cHgweHJCS2xNdXVlOS9yNgozU0hveG16YnlCMGpuemdGTEtjSHcyQzA5OW5waDMzT2Jpd1I1N2JrZS9LU3NMWWxmZytGMWROMm9OTEk2d0FtCnd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKb3ZqbG9MZ3htQzhBKy84WDdWMWNSd0V6bFhpU2NLYlhaSlpUQWdmZUVnb3dYODk0VHJmSWZnaGJxSTNBeFVFRgp3eHBCamZrSFJTNnQwQU96dnViZGF3RFdSQjliYjJWNmVWazZEM29mQTd3NHd2VDRpa0YrZ3I4R3UxOUtpV05kClFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKYytrSTdJZjVaNmtOcldWWlYyUVhDWmJrYXlLNVFiYjZ4aWtLK2lhSHcza1lTNHFtQVpLWmdyWjB4RHRaY3V3aApiYmQxTHZGTEZYTzBOSUgvS2ZwblZXVmV4dHZoYWhkSlFWbVlWbTJzaWx4bU93eXBLd1lndVQyb0ZWclRNOGczCmFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKVkVyM3pvQzdRQ05jei83Uk1Ib1VGTkpITVd4NVlSdXBUNUFWOEU4dlM2Wk9BQVZHeURXODcwbDVSK3pGSG9PYQpqeFJ0eW5uSFZ2R3BjT0p4OXNaZERqR1h6T1ZFVGRwVDRGcVkwOWYyanY2MC9RbXphckxGWDZ3dDBwNWpZdStCCnhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKdEVSYmE4L3I3YkVOMUhJVjlpRzc2VnRjd21JME8yR1Q3YklQNUpJOERzUStaZ3hiekxQVFpNclF1QUlzYTBpVQorTmlXVldhVktCN20zREdZV2lEeUd1UHo2Y1RBeUJrNlhXc2htMW9qSm8xMjRKZklJZGpGUVdVQ2dZRUExNUZkCmxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KOFY2S2VVUUF2LzZVRk14V0dxbDgzVzdnaFQrSTk0UkVyd0g1S3lzWFF5UUw1K3FtUHUwZ1RqR1RUWkEyNXpoWApTT2g2VG5YMUlHTy8raGYvZVVSaEJPNWc3MEFIYUNRZExzSlpvQmNDZ1lBaGlXdWxiSWFLMmtBVFErNWdFRmtGCnArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKY2Q4YmxDS0U1d1JISTI3STRDOVB6S2Z3eCtnYkpHNzdpY2k0MjNPOVpGaWRFOXlZNVljc1g0emFvODUraUNSUwo1anI1Y1c0QXNibmhSazlDbEZlQWZRS0JnR0pzb2VCczd2ODdHMWJZY2ErcVAvemlzN2FjWmxRUXF6WXQwd0MvCk96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKZ1cvL1hjQ3ZIYXlIUzk2aFlFV3pod0U4SG9WV0NTeGwwU292MjNzdGNFTWRYKzBibG55czVwOTJpYXM0Q2djRwpmK3VEQW9HQUlod3lDYnAvcmlIUGxQNmhlczNjYkF3bVJJWVpQU2tBUDZwaWN4QktyQzEyak1iVUpEaTNtaXBuCjdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKaHVIMzVGSDBPa0NENGg1UC9kQzhrMzNmM3JJR1RRNitiTlZRdUpDT051SGRlTG4rYVdFPQ==
  LOGS_API_AUTH_TOKEN: SVJySm84S1R5R0dSWVhYOGxtWUVUY3lIMWxxaFpQU0JJY21pcDF2U2dFVzVXMzZLWUlKcUdNMW1iZ3NRakNWUQ==
  REDIS_PORT: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: api-secret
type: Opaque
---
apiVersion: v1
data:
  GITHUB_PRIVATE_PEM: |
    TUlJRW9nSUJBQUtDQVFFQXdrUUE1Nkl5UXdMVTNyWjk5VGo0UXBJVmdTMSt3R0F5cHgweHJCS2xNdXVlOS9yNgozU0hveG16YnlCMGpuemdGTEtjSHcyQzA5OW5waDMzT2Jpd1I1N2JrZS9LU3NMWWxmZytGMWROMm9OTEk2d0FtCnd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKb3ZqbG9MZ3htQzhBKy84WDdWMWNSd0V6bFhpU2NLYlhaSlpUQWdmZUVnb3dYODk0VHJmSWZnaGJxSTNBeFVFRgp3eHBCamZrSFJTNnQwQU96dnViZGF3RFdSQjliYjJWNmVWazZEM29mQTd3NHd2VDRpa0YrZ3I4R3UxOUtpV05kClFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKYytrSTdJZjVaNmtOcldWWlYyUVhDWmJrYXlLNVFiYjZ4aWtLK2lhSHcza1lTNHFtQVpLWmdyWjB4RHRaY3V3aApiYmQxTHZGTEZYTzBOSUgvS2ZwblZXVmV4dHZoYWhkSlFWbVlWbTJzaWx4bU93eXBLd1lndVQyb0ZWclRNOGczCmFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKVkVyM3pvQzdRQ05jei83Uk1Ib1VGTkpITVd4NVlSdXBUNUFWOEU4dlM2Wk9BQVZHeURXODcwbDVSK3pGSG9PYQpqeFJ0eW5uSFZ2R3BjT0p4OXNaZERqR1h6T1ZFVGRwVDRGcVkwOWYyanY2MC9RbXphckxGWDZ3dDBwNWpZdStCCnhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKdEVSYmE4L3I3YkVOMUhJVjlpRzc2VnRjd21JME8yR1Q3YklQNUpJOERzUStaZ3hiekxQVFpNclF1QUlzYTBpVQorTmlXVldhVktCN20zREdZV2lEeUd1UHo2Y1RBeUJrNlhXc2htMW9qSm8xMjRKZklJZGpGUVdVQ2dZRUExNUZkCmxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KOFY2S2VVUUF2LzZVRk14V0dxbDgzVzdnaFQrSTk0UkVyd0g1S3lzWFF5UUw1K3FtUHUwZ1RqR1RUWkEyNXpoWApTT2g2VG5YMUlHTy8raGYvZVVSaEJPNWc3MEFIYUNRZExzSlpvQmNDZ1lBaGlXdWxiSWFLMmtBVFErNWdFRmtGCnArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKY2Q4YmxDS0U1d1JISTI3STRDOVB6S2Z3eCtnYkpHNzdpY2k0MjNPOVpGaWRFOXlZNVljc1g0emFvODUraUNSUwo1anI1Y1c0QXNibmhSazlDbEZlQWZRS0JnR0pzb2VCczd2ODdHMWJZY2ErcVAvemlzN2FjWmxRUXF6WXQwd0MvCk96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKZ1cvL1hjQ3ZIYXlIUzk2aFlFV3pod0U4SG9WV0NTeGwwU292MjNzdGNFTWRYKzBibG55czVwOTJpYXM0Q2djRwpmK3VEQW9HQUlod3lDYnAvcmlIUGxQNmhlczNjYkF3bVJJWVpQU2tBUDZwaWN4QktyQzEyak1iVUpEaTNtaXBuCjdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKaHVIMzVGSDBPa0NENGg1UC9kQzhrMzNmM3JJR1RRNitiTlZRdUpDT051SGRlTG4rYVdFPQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: build-secret
type: Opaque
---
apiVersion: v1
data:
  GITHUB_PRIVATE_PEM: |
    TUlJRW9nSUJBQUtDQVFFQXdrUUE1Nkl5UXdMVTNyWjk5VGo0UXBJVmdTMSt3R0F5cHgweHJCS2xNdXVlOS9yNgozU0hveG16YnlCMGpuemdGTEtjSHcyQzA5OW5waDMzT2Jpd1I1N2JrZS9LU3NMWWxmZytGMWROMm9OTEk2d0FtCnd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKb3ZqbG9MZ3htQzhBKy84WDdWMWNSd0V6bFhpU2NLYlhaSlpUQWdmZUVnb3dYODk0VHJmSWZnaGJxSTNBeFVFRgp3eHBCamZrSFJTNnQwQU96dnViZGF3RFdSQjliYjJWNmVWazZEM29mQTd3NHd2VDRpa0YrZ3I4R3UxOUtpV05kClFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKYytrSTdJZjVaNmtOcldWWlYyUVhDWmJrYXlLNVFiYjZ4aWtLK2lhSHcza1lTNHFtQVpLWmdyWjB4RHRaY3V3aApiYmQxTHZGTEZYTzBOSUgvS2ZwblZXVmV4dHZoYWhkSlFWbVlWbTJzaWx4bU93eXBLd1lndVQyb0ZWclRNOGczCmFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKVkVyM3pvQzdRQ05jei83Uk1Ib1VGTkpITVd4NVlSdXBUNUFWOEU4dlM2Wk9BQVZHeURXODcwbDVSK3pGSG9PYQpqeFJ0eW5uSFZ2R3BjT0p4OXNaZERqR1h6T1ZFVGRwVDRGcVkwOWYyanY2MC9RbXphckxGWDZ3dDBwNWpZdStCCnhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKdEVSYmE4L3I3YkVOMUhJVjlpRzc2VnRjd21JME8yR1Q3YklQNUpJOERzUStaZ3hiekxQVFpNclF1QUlzYTBpVQorTmlXVldhVktCN20zREdZV2lEeUd1UHo2Y1RBeUJrNlhXc2htMW9qSm8xMjRKZklJZGpGUVdVQ2dZRUExNUZkCmxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KOFY2S2VVUUF2LzZVRk14V0dxbDgzVzdnaFQrSTk0UkVyd0g1S3lzWFF5UUw1K3FtUHUwZ1RqR1RUWkEyNXpoWApTT2g2VG5YMUlHTy8raGYvZVVSaEJPNWc3MEFIYUNRZExzSlpvQmNDZ1lBaGlXdWxiSWFLMmtBVFErNWdFRmtGCnArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKY2Q4YmxDS0U1d1JISTI3STRDOVB6S2Z3eCtnYkpHNzdpY2k0MjNPOVpGaWRFOXlZNVljc1g0emFvODUraUNSUwo1anI1Y1c0QXNibmhSazlDbEZlQWZRS0JnR0pzb2VCczd2ODdHMWJZY2ErcVAvemlzN2FjWmxRUXF6WXQwd0MvCk96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKZ1cvL1hjQ3ZIYXlIUzk2aFlFV3pod0U4SG9WV0NTeGwwU292MjNzdGNFTWRYKzBibG55czVwOTJpYXM0Q2djRwpmK3VEQW9HQUlod3lDYnAvcmlIUGxQNmhlczNjYkF3bVJJWVpQU2tBUDZwaWN4QktyQzEyak1iVUpEaTNtaXBuCjdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKaHVIMzVGSDBPa0NENGg1UC9kQzhrMzNmM3JJR1RRNitiTlZRdUpDT051SGRlTG4rYVdFPQ==
  REDIS_GATEKEEPER_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  TRAVIS_GATEKEEPER_LOGS_API_AUTH_TOKEN: SVJySm84S1R5R0dSWVhYOGxtWUVUY3lIMWxxaFpQU0JJY21pcDF2U2dFVzVXMzZLWUlKcUdNMW1iZ3NRakNWUQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: gatekeeper-secret
type: Opaque
---
apiVersion: v1
data:
  GITHUB_PRIVATE_PEM: |
    TUlJRW9nSUJBQUtDQVFFQXdrUUE1Nkl5UXdMVTNyWjk5VGo0UXBJVmdTMSt3R0F5cHgweHJCS2xNdXVlOS9yNgozU0hveG16YnlCMGpuemdGTEtjSHcyQzA5OW5waDMzT2Jpd1I1N2JrZS9LU3NMWWxmZytGMWROMm9OTEk2d0FtCnd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKb3ZqbG9MZ3htQzhBKy84WDdWMWNSd0V6bFhpU2NLYlhaSlpUQWdmZUVnb3dYODk0VHJmSWZnaGJxSTNBeFVFRgp3eHBCamZrSFJTNnQwQU96dnViZGF3RFdSQjliYjJWNmVWazZEM29mQTd3NHd2VDRpa0YrZ3I4R3UxOUtpV05kClFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKYytrSTdJZjVaNmtOcldWWlYyUVhDWmJrYXlLNVFiYjZ4aWtLK2lhSHcza1lTNHFtQVpLWmdyWjB4RHRaY3V3aApiYmQxTHZGTEZYTzBOSUgvS2ZwblZXVmV4dHZoYWhkSlFWbVlWbTJzaWx4bU93eXBLd1lndVQyb0ZWclRNOGczCmFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKVkVyM3pvQzdRQ05jei83Uk1Ib1VGTkpITVd4NVlSdXBUNUFWOEU4dlM2Wk9BQVZHeURXODcwbDVSK3pGSG9PYQpqeFJ0eW5uSFZ2R3BjT0p4OXNaZERqR1h6T1ZFVGRwVDRGcVkwOWYyanY2MC9RbXphckxGWDZ3dDBwNWpZdStCCnhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKdEVSYmE4L3I3YkVOMUhJVjlpRzc2VnRjd21JME8yR1Q3YklQNUpJOERzUStaZ3hiekxQVFpNclF1QUlzYTBpVQorTmlXVldhVktCN20zREdZV2lEeUd1UHo2Y1RBeUJrNlhXc2htMW9qSm8xMjRKZklJZGpGUVdVQ2dZRUExNUZkCmxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KOFY2S2VVUUF2LzZVRk14V0dxbDgzVzdnaFQrSTk0UkVyd0g1S3lzWFF5UUw1K3FtUHUwZ1RqR1RUWkEyNXpoWApTT2g2VG5YMUlHTy8raGYvZVVSaEJPNWc3MEFIYUNRZExzSlpvQmNDZ1lBaGlXdWxiSWFLMmtBVFErNWdFRmtGCnArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKY2Q4YmxDS0U1d1JISTI3STRDOVB6S2Z3eCtnYkpHNzdpY2k0MjNPOVpGaWRFOXlZNVljc1g0emFvODUraUNSUwo1anI1Y1c0QXNibmhSazlDbEZlQWZRS0JnR0pzb2VCczd2ODdHMWJZY2ErcVAvemlzN2FjWmxRUXF6WXQwd0MvCk96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKZ1cvL1hjQ3ZIYXlIUzk2aFlFV3pod0U4SG9WV0NTeGwwU292MjNzdGNFTWRYKzBibG55czVwOTJpYXM0Q2djRwpmK3VEQW9HQUlod3lDYnAvcmlIUGxQNmhlczNjYkF3bVJJWVpQU2tBUDZwaWN4QktyQzEyak1iVUpEaTNtaXBuCjdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKaHVIMzVGSDBPa0NENGg1UC9kQzhrMzNmM3JJR1RRNitiTlZRdUpDT051SGRlTG4rYVdFPQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: github-sync-secret
type: Opaque
---
apiVersion: v1
data:
  INSIGHTS_REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: hub-secret
type: Opaque
---
apiVersion: v1
data:
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpDejYzNF9PWTZ3bjU4aUloQHRyYXZpc2NpLXBsYXRmb3JtLWluc2lnaHRzLXBvc3RncmVzcWwtaGVhZGxlc3M6NTQzMi90cmF2aXNfaW5zaWdodHNfcHJvZHVjdGlvbg==
  HTTP_AUTH_TOKEN: R3kyb01IVF91MllhUjhnUw==
  INSIGHTS_REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: insights-secret
type: Opaque
---
apiVersion: v1
data:
  pub_key: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEwTG9ESzNRdDZUOGQyc0Jlb201dwoyNFNHY25KSjlxTlBFK25EWGUyU2xyM0F6U3p0a3U5QitwVWJ2T2pHNlpSQ0QwakdRVHZwczltNlhXT3ArWkU4Ck9CT1FWNVdJaG04K25lWm5IRGJkWjJHUS9qU0ptTUdxNzBCRE4xeEZnaFN2VnJLTzJEZDJLZXErMklmeWxoeTkKbU9kTGVQZ1BFZWZOWGgzTEduUGcwUlErL0pZT0ZWaEJvWEpPMGdGWmVpQ2FnNXg2ZlRKZUhqSURxZGZHUVVGUwpRdk5DTGJHRm5vZEc5ZUhrVUFwTmIvMk1GYnVDUFB0NnBlMlhQL1lRY3lCNlp6OHV2WHVzOGxQNFlpUlJ1LzE0Cml5YS9zbkJUdFNyOS8wNE9rS3hYaGMzL1E1ZFMrUUZ1Z0FXUk14NUh1MGlGd3cyUlpvbmlJd24rWW5GaEhBdk8KMjJnbk5GWlFiRlVSbjgrSGtPaUkvMEVreHg0NHp2MHcrdm5pWWtsRmRydXdxWWNGbjdGTzVxK3ZZLzhLWUpPVApQaUNvSkZlOTEyemdVNHNtRnBadmt2b2NiRm5kUVJMZ2lRZkx6U0E5QUlHTEdaZU1QUFpydHpmck9RUGxNUlhUClFkUDVOQVdhbjN2T29lRE9tMktoc3BacElTYnk1ajI5NUU3WFZqWkRudFk0TFlZbUMzZ1VLenp0RzlyNys2TU0KNmQ0WkVDZzdQdGI2Mm1uUmtjd0c1NlJIS2dRZzhQZ3hBVFpTRTNQU3RYcDFBc0VZZTh0R3QwbFZheCs5YnFFdQpERW12dS95Z2xJWmF6dU1YWDRxb1MwRGsrMVJyTFBkanU5UzVuU2dSK2hTNlNsUkZha1VIYzloR1hjNnZXUjlkCnJLcjBHdzVPUlA3TTFid3A0bDFFMGNVQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: jwt-key-secret
type: Opaque
---
apiVersion: v1
data:
  REDIS_GATEKEEPER_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: listener-secret
type: Opaque
---
apiVersion: v1
data:
  AUTH_TOKEN: SVJySm84S1R5R0dSWVhYOGxtWUVUY3lIMWxxaFpQU0JJY21pcDF2U2dFVzVXMzZLWUlKcUdNMW1iZ3NRakNWUQ==
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpkVW1CTDU0emhMSzdFcHNyQHRyYXZpc2NpLXBsYXRmb3JtLWxvZ3MtcG9zdGdyZXNxbC1oZWFkbGVzczo1NDMyL2xvZ3NkYg==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: logs-secret
type: Opaque
---
apiVersion: v1
data:
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpkVW1CTDU0emhMSzdFcHNyQHRyYXZpc2NpLXBsYXRmb3JtLWxvZ3MtcG9zdGdyZXNxbC1oZWFkbGVzczo1NDMyL2xvZ3NkYg==
  PGDATABASE: bG9nc2Ri
  PGHOST: dHJhdmlzY2ktcGxhdGZvcm0tbG9ncy1wb3N0Z3Jlc3FsLWhlYWRsZXNz
  PGPASSWORD: ZFVtQkw1NHpoTEs3RXBzcg==
  PGPORT: NTQzMg==
  PGUSER: cG9zdGdyZXM=
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: migrations-logs-secret
type: Opaque
---
apiVersion: v1
data:
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpfMVVjaFIwQW9TakxjQVpfQHRyYXZpc2NpLXBsYXRmb3JtLXBsYXRmb3JtLXBvc3RncmVzcWwtaGVhZGxlc3M6NTQzMi9wbGF0Zm9ybWRi
  PGPASSWORD: XzFVY2hSMEFvU2pMY0FaXw==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: migrations-secret
---
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhhZ0F3SUJBZ0lSQU5OVmt5WUJra1N5VzNXdHl3clBlUkl3RFFZSktvWklodmNOQVFFTEJRQXcKTWpFd01DNEdBMVVFQXhNblpYaDBMV1JsZGkweExYUmxjM1F1ZEhKaGRtbHpMV05wTFdWdWRHVnljSEpwYzJVdQpZMjl0TUI0WERUSXlNRFV3TlRFek1UazFORm9YRFRJek1EVXdOVEV6TVRrMU5Gb3dNakV3TUM0R0ExVUVBeE1uClpYaDBMV1JsZGkweExYUmxjM1F1ZEhKaGRtbHpMV05wTFdWdWRHVnljSEpwYzJVdVkyOXRNSUlCSWpBTkJna3EKaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFxclBUVTB0WEU2aEpNc0lFME8vejB4TkZURG1aenBhcApFY3o1ZmdwbTVwVTZGQUo3dFNjRHVVRFhmc0FQN1p3ZkpKanFnS0w1ckg4Ti9pRlh1dExNZVpTWFZkK2dEajNNCldjMEJNdHk1NjNYVUpBME1zRnZnelFPN0dBSkxVOEdqcktJTDRWQ0gyZFY3d0pUK2dqVG91QjhmbXJkT2luY0oKQkpzem56cFhQOEdyb0x1dWFBSXN5d2VTMmJNNGFjdUhUMVNUcUJHak10ZVI1bmE5MTl6aENreEo2a2Z0d2d5QgpWMERXQnBPaXNUajM0UVNjU1FSVkFBaEZpTjRraTFmT1Nqc2VCUU4zZFJodnIySnJBSDB3LzZpckVUZlM0bVFDCkJZa2M5S0RkWEpQQWIxbDZnMEIrL0VhVWd6MGhZb2t2SDRGdkJnbXFQRHdld0oyNmxGTUZHd0lEQVFBQm96OHcKUFRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQwpNQXdHQTFVZEV3RUIvd1FDTUFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFIUS9NQlRmQkZvYWw2ZXk1QVpkCi9oOU1EVXBQT2NrWE83S2k1U1R3cHlmTnREUENIT3VSTFBlQXFhVWU0NFlSazYzYk82b1NzNmNZV0hkRDl5Q3UKTVZLUkpCZGI0VVh1UytOTG5uVU1KNDAxS0VmM3BZc0tLNWM1UnUyb3ZqaEVScWlZZGI1bGxzb3RiSDVwU2kzVApxb01IWjBKU0toNTZ1VlptZVpLZXZ2V0RZYWlSV1RnRGQrWmV2WXBVOGszVU5Ua09CNEphUy8wVlRYa0M5TEwwCnB5MFd3WGpyMXhOWVhWQ2orNlV2M001Z2pCOFRrY0dvMk9xV2g3bXJPamZYald2dHMrYlNRa1VNSzZwTzRWRHIKbmxNT3oyc2hMNGNZMWh2ZlVWTm90dlZ4SGFxcnBmRkd4WEpkQmZtR2dEcENPVk52RUFOamNMdENpTFNIdDNISwpQVms9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcXJQVFUwdFhFNmhKTXNJRTBPL3oweE5GVERtWnpwYXBFY3o1ZmdwbTVwVTZGQUo3CnRTY0R1VURYZnNBUDdad2ZKSmpxZ0tMNXJIOE4vaUZYdXRMTWVaU1hWZCtnRGozTVdjMEJNdHk1NjNYVUpBME0Kc0Z2Z3pRTzdHQUpMVThHanJLSUw0VkNIMmRWN3dKVCtnalRvdUI4Zm1yZE9pbmNKQkpzem56cFhQOEdyb0x1dQphQUlzeXdlUzJiTTRhY3VIVDFTVHFCR2pNdGVSNW5hOTE5emhDa3hKNmtmdHdneUJWMERXQnBPaXNUajM0UVNjClNRUlZBQWhGaU40a2kxZk9TanNlQlFOM2RSaHZyMkpyQUgwdy82aXJFVGZTNG1RQ0JZa2M5S0RkWEpQQWIxbDYKZzBCKy9FYVVnejBoWW9rdkg0RnZCZ21xUER3ZXdKMjZsRk1GR3dJREFRQUJBb0lCQUJQNFU2bXo3Nnp5REJZdgpFb2NxK3poZlVjVVlIQUZLS045WFBuemJWS3gzR3NOS2d4UnZTd1U2Szd1OVZsK3kyd1hhQ2QwZ3M5clZSbHJMCnBjcktiSGR3eGIrYkdNdHh1VjFzR1U3TStjY3RFck5nLzNJR1hhYytYMzN3anNWdXF1cEFUdWwrRlZhTG5oMnEKa0pmRS90RERlMXdMUTluNUVRb0Q2aWNmbVNOeElPVHV5dFZEM3UzZ3JkQ0tZM1JUNXFUUW1SRm1PU2k1ajhlawo0ZDNib3MvcHlFT2pRN1VOcVNHNjkxQXJCa0srSUlwMjF6TUxsWUlzSjRxM1dhRUpicEcwMFpOVW1YVDBCZUd2Ckl6Y24zSVViV0doRWV2cDVoR2c5MWovN1JvMHYrQmJJMGxuRHU1N2VSK2ExSk13c3dkblNlK21XWDdmTFZ0NHQKSVltT0NjRUNnWUVBMkhOZE40MnR5ZWEyT09uTVhia2RFTDZvUDRiSDZlSzNDNTRZbDJkbVRoaEJVN1BkNVFhdwpXV2EvSDNWeEtJTllhdHllclcyOG1iWUhNSExYVzJrRUFTR29VTm5OejlZTkdFT2FQYkMyZSsyZGVmdXdTOWdkCmNyRHZadFhjSVRzTzhEOXlMYWdrSEJ0S3RDRzFOZHl1NXVXWUgvMWRNUE9IcGovdk15bkJkQ0VDZ1lFQXllU08KWXZOWk9LbC9lUlVmNnUxV3lFZVRINHFGNkRvN2piQTRzL3pSUFF4bXBQWUZXaWk3bklZWEIvZUhzM05aTmxuTAo4MFNRemJIc3VWNVJzM04rL05XblN4dyt2bkVFWGxldVBJY1JOZjFoUU94L1BSVkhHUnJsQmNMVUpLaTY5bHdsCjV0U1FUWTVZNklkTEdhZ3hPbnZQenNmMFlxUGJlemt4c2FHdEVic0NnWUJMcnBMQ2NPeDZNd3cxL0RHejk1emQKRlB6NU1XUkhPRGx1ZTNuM3ZuUzhDNmtUM2tsUTRqVFpIWjdvSGdWUitCTDdVbWE5RnlpaHlrN2JOdHhzSHQwQwpsRVVvOSs4Sm83dHlaM2pQNXpEM1JnOFE3dHNtdWNzYUpobWZLRm5PMkxxUmNHMjQzeGk1SnlYSXRCeUxWNzFrCkNKVlhZaHlxbUF3dktoMjJFdnlNWVFLQmdRQ1dsRkZlbkFHL3NTdlNNMTlLNlJvQTV1RmtkUHpLNkNQaTJieHgKQWU5TmlTSkZodmtXOWFwNFk4cHB0c1VQb3NpM01PSmMzcGJoMUFLcmZ4MlFxbVBjVDc0bTF6bzA4RFpCNTBPZApBV0JrMUVibEZYOFJILzJYUytmbEZCc0YvSkwxakdUNGRUSHJwbS9KZnA4VTA4MWp3VlNNOWJYZ25EWG5BaEYrCld3ZXFZUUtCZ0hrVGR0OEFCclAwVkJxbXJQWThjL1RnMWJUZlJJODNSWDFhbFBBazR3M1NESkZXOEh3YlhEc1AKWkp5ZGY1NjBsYXRUL0dWZjFJVnR4WHpOM3AwU05TelFpMzJUVEpMMm1NOWh0ZFN6TTJONmNmbHgyU09yNFJaQgp3RXhnbW1NYkE2Rk9UVjR3K3Rqa0pjUkZQUVJEWkY3ckthcFVKcjFLTGRPQnlNeHpLUUF2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: nginx-tls-secret
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: postgresql
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: postgresql
  name: postgresql-insights
stringData:
  postgresql-password: Cz634_OY6wn58iIh
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: postgresql
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: postgresql
  name: postgresql-logs
stringData:
  postgresql-password: dUmBL54zhLK7Epsr
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: postgresql
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: postgresql
  name: postgresql-platform
stringData:
  postgresql-password: _1UchR0AoSjLcAZ_
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: rabbitmq-ha
  name: rabbitmq-secret
stringData:
  definitions.json: |
    {
      "global_parameters": [

      ],
      "users": [
        {
          "name": 'travis',
          "password": 'QHZ50bwXHep_vhV6qAZj2ISJNX4cPxOx59IXK1lJqH3mgKsXtcgy9ap_fi3Mbh45',
          "tags": "management"
        },
        {
          "name": 'travis',
          "password": 'QHZ50bwXHep_vhV6qAZj2ISJNX4cPxOx59IXK1lJqH3mgKsXtcgy9ap_fi3Mbh45',
          "tags": "administrator"
        }
      ],
      "vhosts": [
        {
          "name": 'travis'
        }
      ],
      "permissions": [
        {
          "user": 'travis',
          "vhost": 'travis',
          "configure": ".*",
          "read": ".*",
          "write": ".*"
        }
      ],
      "topic_permissions": [

      ],
      "parameters": [

      ],
      "policies": [

      ],
      "queues": [

      ],
      "exchanges": [

      ],
      "bindings": [

      ]
    }
  rabbitmq-erlang-cookie: LlNIelAKRiRK7XZcFe00Z_LAiRwCpGs8
  rabbitmq-management-password: QHZ50bwXHep_vhV6qAZj2ISJNX4cPxOx59IXK1lJqH3mgKsXtcgy9ap_fi3Mbh45
  rabbitmq-management-username: travis
  rabbitmq-password: QHZ50bwXHep_vhV6qAZj2ISJNX4cPxOx59IXK1lJqH3mgKsXtcgy9ap_fi3Mbh45
  rabbitmq-username: travis
  tls_ca_certificates: ''''''
  tls_cert: ''''''
  tls_key: ''''''
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: redis-secret
stringData:
  redis-password: 2ydBy63nMLNmwkuVPRoKIU4BA07U7WKcWWFe9681Daql6XGlKNjGLWC2WYnlDVCP
type: Opaque
---
apiVersion: v1
data:
  release: 
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  creationTimestamp: null
  labels:
    createdAt: "1"
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    name: travisci-platform
    owner: helm
    status: deployed
    version: "1"
  name: sh.helm.release.v1.travisci-platform.v1
type: helm.sh/release.v1
---
apiVersion: v1
data:
  APPKEY: ZlZtdFU3em5odklwcjA4NE5RQW9iZlJUWHlheEdLRUNYSUpGMXp1bzB0Tms0RjZt
  APPSECRET: SVJySm84S1R5R0dSWVhYOGxtWUVUY3lIMWxxaFpQU0JJY21pcDF2U2dFVzVXMzZLWUlKcUdNMW1iZ3NRakNWUQ==
  REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: slanger-secret
---
apiVersion: v1
data:
  GITHUB_PRIVATE_PEM: |
    TUlJRW9nSUJBQUtDQVFFQXdrUUE1Nkl5UXdMVTNyWjk5VGo0UXBJVmdTMSt3R0F5cHgweHJCS2xNdXVlOS9yNgozU0hveG16YnlCMGpuemdGTEtjSHcyQzA5OW5waDMzT2Jpd1I1N2JrZS9LU3NMWWxmZytGMWROMm9OTEk2d0FtCnd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKb3ZqbG9MZ3htQzhBKy84WDdWMWNSd0V6bFhpU2NLYlhaSlpUQWdmZUVnb3dYODk0VHJmSWZnaGJxSTNBeFVFRgp3eHBCamZrSFJTNnQwQU96dnViZGF3RFdSQjliYjJWNmVWazZEM29mQTd3NHd2VDRpa0YrZ3I4R3UxOUtpV05kClFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKYytrSTdJZjVaNmtOcldWWlYyUVhDWmJrYXlLNVFiYjZ4aWtLK2lhSHcza1lTNHFtQVpLWmdyWjB4RHRaY3V3aApiYmQxTHZGTEZYTzBOSUgvS2ZwblZXVmV4dHZoYWhkSlFWbVlWbTJzaWx4bU93eXBLd1lndVQyb0ZWclRNOGczCmFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKVkVyM3pvQzdRQ05jei83Uk1Ib1VGTkpITVd4NVlSdXBUNUFWOEU4dlM2Wk9BQVZHeURXODcwbDVSK3pGSG9PYQpqeFJ0eW5uSFZ2R3BjT0p4OXNaZERqR1h6T1ZFVGRwVDRGcVkwOWYyanY2MC9RbXphckxGWDZ3dDBwNWpZdStCCnhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKdEVSYmE4L3I3YkVOMUhJVjlpRzc2VnRjd21JME8yR1Q3YklQNUpJOERzUStaZ3hiekxQVFpNclF1QUlzYTBpVQorTmlXVldhVktCN20zREdZV2lEeUd1UHo2Y1RBeUJrNlhXc2htMW9qSm8xMjRKZklJZGpGUVdVQ2dZRUExNUZkCmxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KOFY2S2VVUUF2LzZVRk14V0dxbDgzVzdnaFQrSTk0UkVyd0g1S3lzWFF5UUw1K3FtUHUwZ1RqR1RUWkEyNXpoWApTT2g2VG5YMUlHTy8raGYvZVVSaEJPNWc3MEFIYUNRZExzSlpvQmNDZ1lBaGlXdWxiSWFLMmtBVFErNWdFRmtGCnArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKY2Q4YmxDS0U1d1JISTI3STRDOVB6S2Z3eCtnYkpHNzdpY2k0MjNPOVpGaWRFOXlZNVljc1g0emFvODUraUNSUwo1anI1Y1c0QXNibmhSazlDbEZlQWZRS0JnR0pzb2VCczd2ODdHMWJZY2ErcVAvemlzN2FjWmxRUXF6WXQwd0MvCk96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKZ1cvL1hjQ3ZIYXlIUzk2aFlFV3pod0U4SG9WV0NTeGwwU292MjNzdGNFTWRYKzBibG55czVwOTJpYXM0Q2djRwpmK3VEQW9HQUlod3lDYnAvcmlIUGxQNmhlczNjYkF3bVJJWVpQU2tBUDZwaWN4QktyQzEyak1iVUpEaTNtaXBuCjdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKaHVIMzVGSDBPa0NENGg1UC9kQzhrMzNmM3JJR1RRNitiTlZRdUpDT051SGRlTG4rYVdFPQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: tasks-secret
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-config-secret
stringData:
  travis.yml: "production:\n  applications:\n    admin:\n      token: FbOmkc14ty0tZYy3Kh_SIS4dsVCcZYwZ\n
    \     full_access: true\n  admins: \n    sanelca\n  disable_otp: true\n  github_apps:\n
    \   id: 197776\n    private_pem: |-\n     MIIEogIBAAKCAQEAwkQA56IyQwLU3rZ99Tj4QpIVgS1+wGAypx0xrBKlMuue9/r6\n
    \    3SHoxmzbyB0jnzgFLKcHw2C099nph33ObiwR57bke/KSsLYlfg+F1dN2oNLI6wAm\n     wz/Ai1mLDbC7fYwzq4dNyRGtfnhfhIFbL3/xAfwr0idN49dvNCYuAjD67ivMuAdG\n
    \    ovjloLgxmC8A+/8X7V1cRwEzlXiScKbXZJZTAgfeEgowX894TrfIfghbqI3AxUEF\n     wxpBjfkHRS6t0AOzvubdawDWRB9bb2V6eVk6D3ofA7w4wvT4ikF+gr8Gu19KiWNd\n
    \    QNoB1Vcvv/8LtuSvp7+D0iI1kC/K0CvOCLUAEwIDAQABAoIBABw++Qa0/aviqILt\n     c+kI7If5Z6kNrWVZV2QXCZbkayK5Qbb6xikK+iaHw3kYS4qmAZKZgrZ0xDtZcuwh\n
    \    bbd1LvFLFXO0NIH/KfpnVWVextvhahdJQVmYVm2silxmOwypKwYguT2oFVrTM8g3\n     asPATZGlUdXPozKiq2eguYXWC1Y/xTQMWBtjR30Txjmavzb5pwLS5rQHv96LWLK2\n
    \    VEr3zoC7QCNcz/7RMHoUFNJHMWx5YRupT5AV8E8vS6ZOAAVGyDW870l5R+zFHoOa\n     jxRtynnHVvGpcOJx9sZdDjGXzOVETdpT4FqY09f2jv60/QmzarLFX6wt0p5jYu+B\n
    \    xFD/x9kCgYEA5rPMe+8EQXqjJc7DPpobhBiwzM6O6UrrINqDX46c6Tj+7BipfMI0\n     tERba8/r7bEN1HIV9iG76VtcwmI0O2GT7bIP5JI8DsQ+ZgxbzLPTZMrQuAIsa0iU\n
    \    +NiWVWaVKB7m3DGYWiDyGuPz6cTAyBk6XWshm1ojJo124JfIIdjFQWUCgYEA15Fd\n     lAoFmLit7b28OdVOXh02f/iVAMC6OMPBVC1x+OjSwuO5wCv1iTK5dAQ20cDxArq/\n
    \    8V6KeUQAv/6UFMxWGql83W7ghT+I94RErwH5KysXQyQL5+qmPu0gTjGTTZA25zhX\n     SOh6TnX1IGO/+hf/eURhBO5g70AHaCQdLsJZoBcCgYAhiWulbIaK2kATQ+5gEFkF\n
    \    p+0zqKdfxJNPsFQ+tOWchbuRKLiiuTyeI/3CO3SJlh5zjq4gnKDLeIuQemQrabDu\n     cd8blCKE5wRHI27I4C9PzKfwx+gbJG77ici423O9ZFidE9yY5YcsX4zao85+iCRS\n
    \    5jr5cW4AsbnhRk9ClFeAfQKBgGJsoeBs7v87G1bYca+qP/zis7acZlQQqzYt0wC/\n     OzGeBFUtquseZx58hYZ+QhVlVeWcJPVs6CbUMM94yl3wqkPELRnhfSv5xWzV/JI3\n
    \    gW//XcCvHayHS96hYEWzhwE8HoVWCSxl0Sov23stcEMdX+0blnys5p92ias4CgcG\n     f+uDAoGAIhwyCbp/riHPlP6hes3cbAwmRIYZPSkAP6picxBKrC12jMbUJDi3mipn\n
    \    7Ka3lsodvox715SLM3XhGzs7nVd+svUApsnEY9ZWI3ms41vJqiqjCiKR9ya/oQ4c\n     huH35FH0OkCD4h5P/dC8k33f3rIGTQ6+bNVQuJCONuHdeLn+aWE=\n
    \ enterprise: true\n  public_mode: true\n  force_authentication: true\n  domain:
    ext-dev-1-test.travis-ci-enterprise.com\n  host: ext-dev-1-test.travis-ci-enterprise.com\n
    \ service_hook_url: https://ext-dev-1-test.travis-ci-enterprise.com/listener/\n\n
    \ web_endpoint: ext-dev-1-test.travis-ci-enterprise.com\n  api_endpoint: https://ext-dev-1-test.travis-ci-enterprise.com/api\n
    \ app_host: ext-dev-1-test.travis-ci-enterprise.com/__build__\n  session_secret:
    IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n  encryption_key:
    IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n  log_level:
    info\n  sidekiq:\n    log_level: info\n\n  metrics:\n    reporter:\n  repository:\n
    \   visibility:\n      - public\n      - private\n  sync:\n    types:\n      -
    public\n      - private\n  notifications:\n    - pusher\n    - irc\n    - webhook\n
    \   - campfire\n    - hipchat\n    - flowdock\n    - github_commit_status\n    -
    github_check_status\n    - sqwiggle\n    - slack\n    # - email\n\n  default_queue:
    builds.bionic\n  default_dist: bionic\n  queue:\n    default: builds.bionic\n
    \   limit:\n      default: 99999\n    delegate:\n  limit:\n    default: 99999\n
    \   public: 99999\n    education: 99999\n  queues:\n    - queue: builds.xenial\n
    \     dist: xenial\n    - queue: builds.trusty\n      dist: trusty\n    - queue:
    builds.focal\n      dist: focal\n\n  include_tag_name_in_worker_payload: true\n
    \ limit_per_repo_enabled: true\n  auth:\n    target_origin: ext-dev-1-test.travis-ci-enterprise.com\n
    \   disable_third_party_cookies_check: ext-dev-1-test.travis-ci-enterprise.com\n
    \ oauth2:\n    client_id:                        fd1b19d9a453a5b9b62b\n    client_secret:
    \                   db9d453cd3b16caa339ae403f649b3311283fb26\n    authorization_server:
    \            https://github.com\n    insufficient_access_redirect_url: https://github.com/insufficient_oauth_permissions\n
    \   authorize_path:                   login/oauth/authorize\n    access_token_path:
    \               login/oauth/access_token\n    user_attributes_path:             api/v2/json/user/show\n
    \   user_attribute_uid_key:           user/login\n    scope:                            user:email,repo,read:org\n
    \ encryption:\n    key: e7ltxIK6xZhUbCgOwg5nc32vM2VmPxt1ohPeOrco92oHElHOwcNhSWT3zOZRcxd2mi6vDB_oG2kwCg4S2Xu2PZwX4TePyk0LaerMB26dTdtH9g7ZKTy01Nql1D63ShgHK1jIkX4Va7ou2Ac7A4KiDzUoIlXuI3ZPjJSrFFkNxV_oVdbmCmJVzEcPHAja9RlxYePEjWdntigDFTy42TvJ9e43RLWYHwOvu8KHomdELLJ543FBXIj1NgjtDT5NlNpm\n
    \ providers:\n    github:\n      base_url: https://github.com/\n    \n  endpoints:\n
    \   ssh_key: true\n  assets:\n    host: ext-dev-1-test.travis-ci-enterprise.com\n
    \ github:\n    source_host: github.com\n    url:         https://github.com\n
    \   api_url:     https://api.github.com\n    enterprise_legacy_oauth: false\n
    \   ssl:\n      verify: false\n  smtp:\n    address:   smtp.gmail.com\n    domain:
    \   ext-dev-1-test.travis-ci-enterprise.com\n    enable_starttls_auto: true\n
    \   # user_name:\n    # password:\n    # port:\n    # authentication:\n  email:\n
    \   from:\n\n  librato:\n    email:\n    token:\n    source:\n\n  customerio:\n
    \   site_id:\n    api_key:\n\n  database:\n    adapter:   postgresql\n    host:
    \     travisci-platform-platform-postgresql-headless\n    port:      5432\n    database:
    \ platformdb\n    username:  postgres\n    password:  _1UchR0AoSjLcAZ_\n    pool:
    \     20\n  yml:\n    url: http://travis-yml\n  vcs:\n    url: http://travis-vcs\n
    \   endpoint: http://travis-vcs\n    token: Y8eXSzgsvls7N0oqOeKKus4BpjM5aCkU\n
    \ v3:\n    url: ext-dev-1-test.travis-ci-enterprise.com/api\n    token: FbOmkc14ty0tZYy3Kh_SIS4dsVCcZYwZ\n
    \ logs:\n    disable_ssl: true\n    aggregate_clean_skip_empty: false\n    drain_consumer_count:
    5\n    drain_execution_interval: 6\n    drain_loop_sleep_interval: 18\n    aggregate_pool:\n
    \     max_threads: 10\n      min_threads: 10\n    archive:   false\n    url: http://travis-logs\n
    \   token: IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n
    \ channels_existence_check: false\n  logs_api:\n    url: http://travis-logs\n
    \   token:  IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n
    \   enabled: true\n  logs_database:\n    url:       postgres://postgres:dUmBL54zhLK7Epsr@travisci-platform-logs-postgresql-headless:5432/logsdb\n
    \   adapter:   postgresql\n    host:      travisci-platform-logs-postgresql-headless\n
    \   port:      5432\n    database:  logsdb\n    username:  postgres\n    password:
    \ dUmBL54zhLK7Epsr\n    pool:      20\n    ssl:       false\n  amqp:\n    host:
    \     \"travisci-platform-rabbitmq-ha\"\n    username:  \"travis\"\n    password:
    \ QHZ50bwXHep_vhV6qAZj2ISJNX4cPxOx59IXK1lJqH3mgKsXtcgy9ap_fi3Mbh45\n    port:
    \     5672\n    vhost:     \"travis\"\n    heartbeat: server\n    prefetch: 500\n\n
    \ redis:\n    skip_user_val: 0\n    \n    url:       redis://redis_user:2ydBy63nMLNmwkuVPRoKIU4BA07U7WKcWWFe9681Daql6XGlKNjGLWC2WYnlDVCP@travisci-platform-redis-headless:6379\n
    \   timeout:   20\n  redis_gatekeeper:\n    \n    url:       redis://redis_user:2ydBy63nMLNmwkuVPRoKIU4BA07U7WKcWWFe9681Daql6XGlKNjGLWC2WYnlDVCP@travisci-platform-redis-headless:6379\n
    \   timeout:   20\n  lock:\n    ttl:       150000\n  pusher:\n    scheme:    http\n
    \   host:      slanger\n    port:      4567\n    app_id:    1\n    key:       fVmtU7znhvIpr084NQAobfRTXyaxGKECXIJF1zuo0tNk4F6m\n
    \   secret:    IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n
    \   secure:    true\n  pusher_ws:\n    scheme:\n    host:      ext-dev-1-test.travis-ci-enterprise.com\n
    \   path:      slanger-ws\n    key:       fVmtU7znhvIpr084NQAobfRTXyaxGKECXIJF1zuo0tNk4F6m\n
    \   secret:    IRrJo8KTyGGRYXX8lmYETcyH1lqhZPSBIcmip1vSgEW5W36KYIJqGM1mbgsQjCVQ\n
    \   secure:    true\n  requests_create_api_limit: 9999999\n  settings:\n    matrix_size_limit:
    9999999\n    timeouts:\n      defaults:\n        hard_limit: 50\n        log_silence:
    10\n      maximums:\n        hard_limit: 180\n        log_silence: 60\n  prefer_https:
    false\n  ssl:\n    # ca_file: /usr/lib/ssl/certs/ca-certificates.crt\n    verify:
    false\n\n  # s3:\n\n  # gcs:\n\n  # gcs:\n  # s3:\n\n  insights:\n    auth_token:
    Gy2oMHT_u2YaR8gS\n    endpoint: http://travis-insights\n"
---
apiVersion: v1
data:
  ENCRYPTION_KEY: ZTdsdHhJSzZ4WmhVYkNnT3dnNW5jMzJ2TTJWbVB4dDFvaFBlT3Jjbzkyb0hFbEhPd2NOaFNXVDN6T1pSY3hkMm1pNnZEQl9vRzJrd0NnNFMyWHUyUFp3WDRUZVB5azBMYWVyTUIyNmRUZHRIOWc3WktUeTAxTnFsMUQ2M1NoZ0hLMWpJa1g0VmE3b3UyQWM3QTRLaUR6VW9JbFh1STNaUGpKU3JGRmtOeFZfb1ZkYm1DbUpWekVjUEhBamE5Umx4WWVQRWpXZG50aWdERlR5NDJUdko5ZTQzUkxXWUh3T3Z1OEtIb21kRUxMSjU0M0ZCWElqMU5nanREVDVObE5wbQ==
  REDIS_GATEKEEPER_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  SECRET_KEY_BASE: czhaUjB5UUMyZmdLbGhNbXZyZ0gwWTg1YlBwZnFaQ0R1a1VtVFY1N053cDFsRzhTSEZadFFoT3o4TWtGNGhHN1VwcGpEdWVmdGtEM09hTHBaRWNkUmU4YmFCT2FmeVdManc4WmZDa01WNUk5M1lHTHNWbUxqTXBLNzB1enk2RVNtYmR1dWMyQkRQWThTcFZQbDF4Znpkb3hQazFpTkdJM3lhaXN0eThsTWNnMGEwRElZekluR2p5NmVhbkhMTUZTMk9yS1ZldUVQbzNwdFcwUnpzV1ZnbnJJRnFaaWltSVcwMEVQQ2dnM0tZNm1MVnhoT2F3Qkc0ZDVNM0ZUMFRNQQ==
  VCS_API_AUTH_TOKEN: WThlWFN6Z3N2bHM3TjBvcU9lS0t1czRCcGpNNWFDa1U=
  VCS_TOKEN: WThlWFN6Z3N2bHM3TjBvcU9lS0t1czRCcGpNNWFDa1U=
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: vcs-listener-secret
type: Opaque
---
apiVersion: v1
data:
  DATABASE_URL: cG9zdGdyZXM6Ly9wb3N0Z3JlczpfMVVjaFIwQW9TakxjQVpfQHRyYXZpc2NpLXBsYXRmb3JtLXBsYXRmb3JtLXBvc3RncmVzcWwtaGVhZGxlc3M6NTQzMi9wbGF0Zm9ybWRi
  ENCRYPTION_KEY: ZTdsdHhJSzZ4WmhVYkNnT3dnNW5jMzJ2TTJWbVB4dDFvaFBlT3Jjbzkyb0hFbEhPd2NOaFNXVDN6T1pSY3hkMm1pNnZEQl9vRzJrd0NnNFMyWHUyUFp3WDRUZVB5azBMYWVyTUIyNmRUZHRIOWc3WktUeTAxTnFsMUQ2M1NoZ0hLMWpJa1g0VmE3b3UyQWM3QTRLaUR6VW9JbFh1STNaUGpKU3JGRmtOeFZfb1ZkYm1DbUpWekVjUEhBamE5Umx4WWVQRWpXZG50aWdERlR5NDJUdko5ZTQzUkxXWUh3T3Z1OEtIb21kRUxMSjU0M0ZCWElqMU5nanREVDVObE5wbQ==
  GITHUB_APPS_PRIVATE_PEM: ICAgIE1JSUVvZ0lCQUFLQ0FRRUF3a1FBNTZJeVF3TFUzclo5OVRqNFFwSVZnUzErd0dBeXB4MHhyQktsTXV1ZTkvcjYKICAgIDNTSG94bXpieUIwam56Z0ZMS2NIdzJDMDk5bnBoMzNPYml3UjU3YmtlL0tTc0xZbGZnK0YxZE4yb05MSTZ3QW0KICAgIHd6L0FpMW1MRGJDN2ZZd3pxNGROeVJHdGZuaGZoSUZiTDMveEFmd3IwaWRONDlkdk5DWXVBakQ2N2l2TXVBZEcKICAgIG92amxvTGd4bUM4QSsvOFg3VjFjUndFemxYaVNjS2JYWkpaVEFnZmVFZ293WDg5NFRyZklmZ2hicUkzQXhVRUYKICAgIHd4cEJqZmtIUlM2dDBBT3p2dWJkYXdEV1JCOWJiMlY2ZVZrNkQzb2ZBN3c0d3ZUNGlrRitncjhHdTE5S2lXTmQKICAgIFFOb0IxVmN2di84THR1U3ZwNytEMGlJMWtDL0swQ3ZPQ0xVQUV3SURBUUFCQW9JQkFCdysrUWEwL2F2aXFJTHQKICAgIGMra0k3SWY1WjZrTnJXVlpWMlFYQ1pia2F5SzVRYmI2eGlrSytpYUh3M2tZUzRxbUFaS1pncloweER0WmN1d2gKICAgIGJiZDFMdkZMRlhPME5JSC9LZnBuVldWZXh0dmhhaGRKUVZtWVZtMnNpbHhtT3d5cEt3WWd1VDJvRlZyVE04ZzMKICAgIGFzUEFUWkdsVWRYUG96S2lxMmVndVlYV0MxWS94VFFNV0J0alIzMFR4am1hdnpiNXB3TFM1clFIdjk2TFdMSzIKICAgIFZFcjN6b0M3UUNOY3ovN1JNSG9VRk5KSE1XeDVZUnVwVDVBVjhFOHZTNlpPQUFWR3lEVzg3MGw1Uit6RkhvT2EKICAgIGp4UnR5bm5IVnZHcGNPSng5c1pkRGpHWHpPVkVUZHBUNEZxWTA5ZjJqdjYwL1FtemFyTEZYNnd0MHA1all1K0IKICAgIHhGRC94OWtDZ1lFQTVyUE1lKzhFUVhxakpjN0RQcG9iaEJpd3pNNk82VXJySU5xRFg0NmM2VGorN0JpcGZNSTAKICAgIHRFUmJhOC9yN2JFTjFISVY5aUc3NlZ0Y3dtSTBPMkdUN2JJUDVKSThEc1ErWmd4YnpMUFRaTXJRdUFJc2EwaVUKICAgICtOaVdWV2FWS0I3bTNER1lXaUR5R3VQejZjVEF5Qms2WFdzaG0xb2pKbzEyNEpmSUlkakZRV1VDZ1lFQTE1RmQKICAgIGxBb0ZtTGl0N2IyOE9kVk9YaDAyZi9pVkFNQzZPTVBCVkMxeCtPalN3dU81d0N2MWlUSzVkQVEyMGNEeEFycS8KICAgIDhWNktlVVFBdi82VUZNeFdHcWw4M1c3Z2hUK0k5NFJFcndINUt5c1hReVFMNStxbVB1MGdUakdUVFpBMjV6aFgKICAgIFNPaDZUblgxSUdPLytoZi9lVVJoQk81ZzcwQUhhQ1FkTHNKWm9CY0NnWUFoaVd1bGJJYUsya0FUUSs1Z0VGa0YKICAgIHArMHpxS2RmeEpOUHNGUSt0T1djaGJ1UktMaWl1VHllSS8zQ08zU0psaDV6anE0Z25LRExlSXVRZW1RcmFiRHUKICAgIGNkOGJsQ0tFNXdSSEkyN0k0QzlQektmd3grZ2JKRzc3aWNpNDIzTzlaRmlkRTl5WTVZY3NYNHphbzg1K2lDUlMKICAgIDVqcjVjVzRBc2JuaFJrOUNsRmVBZlFLQmdHSnNvZUJzN3Y4N0cxYlljYStxUC96aXM3YWNabFFRcXpZdDB3Qy8KICAgIE96R2VCRlV0cXVzZVp4NThoWVorUWhWbFZlV2NKUFZzNkNiVU1NOTR5bDN3cWtQRUxSbmhmU3Y1eFd6Vi9KSTMKICAgIGdXLy9YY0N2SGF5SFM5NmhZRVd6aHdFOEhvVldDU3hsMFNvdjIzc3RjRU1kWCswYmxueXM1cDkyaWFzNENnY0cKICAgIGYrdURBb0dBSWh3eUNicC9yaUhQbFA2aGVzM2NiQXdtUklZWlBTa0FQNnBpY3hCS3JDMTJqTWJVSkRpM21pcG4KICAgIDdLYTNsc29kdm94NzE1U0xNM1hoR3pzN25WZCtzdlVBcHNuRVk5WldJM21zNDF2SnFpcWpDaUtSOXlhL29RNGMKICAgIGh1SDM1RkgwT2tDRDRoNVAvZEM4azMzZjNySUdUUTYrYk5WUXVKQ09OdUhkZUxuK2FXRT0=
  GITHUB_CLIENT_SECRET: ZGI5ZDQ1M2NkM2IxNmNhYTMzOWFlNDAzZjY0OWIzMzExMjgzZmIyNg==
  REDIS_GATEKEEPER_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  REDIS_URL: cmVkaXM6Ly9yZWRpc191c2VyOjJ5ZEJ5NjNuTUxObXdrdVZQUm9LSVU0QkEwN1U3V0tjV1dGZTk2ODFEYXFsNlhHbEtOakdMV0MyV1lubERWQ1BAdHJhdmlzY2ktcGxhdGZvcm0tcmVkaXMtaGVhZGxlc3M6NjM3OQ==
  SECRET_KEY_BASE: XzFVY2hSMEFvU2pMY0FaXw==
  VCS_API_AUTH_TOKEN: WThlWFN6Z3N2bHM3TjBvcU9lS0t1czRCcGpNNWFDa1U=
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: vcs-secret
type: Opaque
---
apiVersion: v1
data:
  AMQP_SECRET: UUhaNTBid1hIZXBfdmhWNnFBWmoySVNKTlg0Y1B4T3g1OUlYSzFsSnFIM21nS3NYdGNneTlhcF9maTNNYmg0NQ==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: wait4rabbit-secret
type: Opaque
---
apiVersion: v1
data:
  REDIS_PASSWORD: MnlkQnk2M25NTE5td2t1VlBSb0tJVTRCQTA3VTdXS2NXV0ZlOTY4MURhcWw2WEdsS05qR0xXQzJXWW5sRFZDUA==
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: wait4redis-secret
type: Opaque
---
apiVersion: v1
data:
  PUSHER_KEY: ZlZtdFU3em5odklwcjA4NE5RQW9iZlJUWHlheEdLRUNYSUpGMXp1bzB0Tms0RjZt
kind: Secret
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: web-secret
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
spec:
  ports:
  - name: http
    port: 15672
    protocol: TCP
    targetPort: http
  - name: amqp
    port: 5672
    protocol: TCP
    targetPort: amqp
  - name: epmd
    port: 4369
    protocol: TCP
    targetPort: epmd
  selector:
    app: rabbitmq-ha
    release: travisci-platform
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha-discovery
  namespace: tci-enterprise-kots
spec:
  clusterIP: None
  ports:
  - name: http
    port: 15672
    protocol: TCP
    targetPort: http
  - name: amqp
    port: 5672
    protocol: TCP
    targetPort: amqp
  - name: epmd
    port: 4369
    protocol: TCP
    targetPort: epmd
  publishNotReadyAddresses: true
  selector:
    app: rabbitmq-ha
    release: travisci-platform
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-redis-headless
  namespace: tci-enterprise-kots
spec:
  clusterIP: None
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: travisci-platform
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-redis-master
  namespace: tci-enterprise-kots
spec:
  ports:
  - name: redis
    port: 6379
    targetPort: redis
  selector:
    app: redis
    release: travisci-platform
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    beta.cloud.google.com/backend-config: '{"ports": {"443":"nginx-backendconfig"}}'
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: nginx
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: nginx
spec:
  ports:
  - name: nginx-https
    port: 443
    protocol: TCP
    targetPort: nginx-https
  - name: nginx-http
    port: 80
    protocol: TCP
    targetPort: nginx-http
  - name: nginx-amqps
    port: 5671
    protocol: TCP
    targetPort: nginx-amqps
  - name: nginx-amqp
    port: 5672
    protocol: TCP
    targetPort: nginx-amqp
  - name: nginx-admin
    port: 3333
    protocol: TCP
    targetPort: 3333
  selector:
    app: nginx
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: slanger
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: slanger
spec:
  ports:
  - name: ws
    port: 8080
    protocol: TCP
    targetPort: ws
  - name: http
    port: 4567
    protocol: TCP
    targetPort: http
  selector:
    app: slanger
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: titled
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: http
  selector:
    app: kotsadm
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-admin
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-admin
spec:
  ports:
  - port: 3333
    protocol: TCP
    targetPort: http-admin
  selector:
    app: travis-admin-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-api
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-api
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-api
  selector:
    app: travis-api
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-build
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-build
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-build
  selector:
    app: travis-build
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-insights
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-insights
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: travis-insights
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-listener
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-listener
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-listener
  selector:
    app: travis-listener
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-logs
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-logs
  selector:
    app: travis-logs-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-vcs
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-vcs
  selector:
    app: travis-vcs-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs-listener
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-vcs-listener
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: vcs-listener
  selector:
    app: travis-vcs-listener-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-web
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-web
  selector:
    app: travis-web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-yml
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-yml
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: http-yml
  selector:
    app: travis-yml
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: insights-postgresql
    chart: insights-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-insights-postgresql
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: insights-postgresql
    release: travisci-platform
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: insights-postgresql
    chart: insights-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-insights-postgresql-headless
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: insights-postgresql
    release: travisci-platform
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: logs-postgresql
    chart: logs-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-logs-postgresql
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: logs-postgresql
    release: travisci-platform
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: logs-postgresql
    chart: logs-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-logs-postgresql-headless
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: logs-postgresql
    release: travisci-platform
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: platform-postgresql
    chart: platform-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-platform-postgresql
spec:
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: platform-postgresql
    release: travisci-platform
    role: master
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: platform-postgresql
    chart: platform-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-platform-postgresql-headless
spec:
  clusterIP: None
  ports:
  - name: tcp-postgresql
    port: 5432
    targetPort: tcp-postgresql
  selector:
    app: platform-postgresql
    release: travisci-platform
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/nginx-config: 853aea26434ebd7e24ae19538b7f3820821005028357c5a42bf25a0fc797da3b
        checksum/nginx-key: 983abd2d4ce2cda2a28fc24974fd9fdc32211308daf5030b121f7f6897b1cea7
        checksum/nginx-ssl: 04846890d746f809d4c242da34c1fa468bc0bf17818612490118e9b240bc492a
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: nginx
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - nginx -c /etc/nginx/nginx-config.conf
        command:
        - /bin/sh
        - -c
        image: quay.io/travisci/certbot-nginx:04239a6
        livenessProbe:
          httpGet:
            path: /_healthz
            port: 80
        name: nginx
        ports:
        - containerPort: 80
          name: nginx-http
        - containerPort: 443
          name: nginx-https
        - containerPort: 5671
          name: nginx-amqps
        - containerPort: 5672
          name: nginx-amqp
        - containerPort: 3333
          name: nginx-admin
        volumeMounts:
        - mountPath: /etc/nginx/nginx-config.conf
          name: nginx-config
          readOnly: true
          subPath: nginx.conf
        - mountPath: /etc/nginx/conf/nginx-ssl.conf
          name: nginx-ssl
          readOnly: true
          subPath: nginx-ssl.conf
        - mountPath: /opt/certs
          name: tls-keys
          readOnly: true
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      volumes:
      - configMap:
          name: nginx
        name: nginx-config
      - configMap:
          name: nginx-ssl
        name: nginx-ssl
      - name: tls-keys
        secret:
          secretName: nginx-tls-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: slanger
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: slanger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: slanger
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: slanger
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./bin/slanger -v --app_key $APPKEY --secret $APPSECRET -r $REDIS_URL --webhook_url
          https://$TRAVIS_HOSTNAME/__logs__/pusher/existence
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: slanger
        - secretRef:
            name: slanger-secret
        image: quay.io/travisci/slanger:6cdcb4a
        imagePullPolicy: IfNotPresent
        name: slanger
        ports:
        - containerPort: 8080
          name: ws
          protocol: TCP
        - containerPort: 4567
          name: http
          protocol: TCP
        volumeMounts:
        - mountPath: /opt/certs
          name: tls-keys
          readOnly: true
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - name: tls-keys
        secret:
          secretName: nginx-tls-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-admin-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-admin-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-admin-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/admin-config: e2b40631e0e41a91280f98971ef888d140da721e9299d29cb49201d4ac195941
        checksum/admin-secret: 118ec66c19630ed80387194827b12d2da2a9b8dd678fd6d2d14559fc6f8718e2
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-admin-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec puma -C config/puma.rb
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: admin-config
        - secretRef:
            name: admin-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-admin:3e8a292-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-admin
          timeoutSeconds: 5
        name: travis-admin
        ports:
        - containerPort: 3333
          hostPort: 3333
          name: http-admin
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-admin
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-admin-worker
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-admin-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-admin-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/admin-config: e2b40631e0e41a91280f98971ef888d140da721e9299d29cb49201d4ac195941
        checksum/admin-secret: 8dd8e1ec6affaadcf98fd8a54ad73fdb6632fe2847edf7b5366adbba4e1124fc
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-admin-worker
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec sidekiq
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: admin-config
        - secretRef:
            name: admin-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-admin:3e8a292-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-admin
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-api
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-api
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/api-config: e66fa95f64da745af3eea6c13156ef6ea870ec4e3fc334f026a97039e8ebeef0
        checksum/api-secret: d2874b46b2c8638ac56b91e33f0163765fc1a2f4ff802ec81c1ec4fa638d3ccb
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-api
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/server-buildpacks
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: travis-api
        - secretRef:
            name: api-secret
        image: quay.io/travisci/travis-api:95b0da0-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-api
          timeoutSeconds: 5
        name: travis-api
        ports:
        - containerPort: 3000
          name: http-api
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-api
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-api-cron
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-api-cron
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-api-cron
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/api-config: e66fa95f64da745af3eea6c13156ef6ea870ec4e3fc334f026a97039e8ebeef0
        checksum/api-secret: d2874b46b2c8638ac56b91e33f0163765fc1a2f4ff802ec81c1ec4fa638d3ccb
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-api-cron
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec ./bin/cron
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: travis-api
        - secretRef:
            name: api-secret
        image: quay.io/travisci/travis-api:95b0da0-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-api
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-build
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-build
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-build
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/build-config: adbe128648b5373dc870016c955ada8186cda76489d3591c1beb7272af17c67c
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-build
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - script/server
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: build-config
        - secretRef:
            name: build-secret
        image: quay.io/travisci/travis-build:ga-jdkpath
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /uptime
            port: http-build
        name: travis-build
        ports:
        - containerPort: 4000
          name: http-build
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /uptime
            port: http-build
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-gatekeeper
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-gatekeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-gatekeeper
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/gatekeeper-config: 9208604db18f5f8ad2799f9e40a0c8c6f7210466fabfd5e274e094ad569e03a0
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-gatekeeper
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec bin/sidekiq ${SIDEKIQ_CONCURRENCY:-5} ${SIDEKIQ_QUEUE:-build_requests}
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: gatekeeper-config
        - secretRef:
            name: gatekeeper-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-gatekeeper:f3d75c3-e30-forkshare
        imagePullPolicy: IfNotPresent
        name: travis-gatekeeper
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-github-sync
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-github-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-github-sync
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/github-sync-config: a9c5d810defc5ae6090aa0b8b22bb57aa129612defdaba842c695143a4e1c36b
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-github-sync
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je bin/sidekiq-pgbouncer sync,10 sync.low,5 sync.auto,1 sync.auto.low,1
          sync.gh_apps,10 sync.app,10, sync.app.low,5;
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: travis-github-sync
        - secretRef:
            name: github-sync-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-github-sync:5479c9c-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-github-sync
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-hub
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-hub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-hub
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/hub-config: 09d295d879962e1150466167436516619c003e3f45984ffa032706101393facc
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-hub
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je bin/sidekiq-pgbouncer ${SIDEKIQ_CONCURRENCY:-5} ${SIDEKIQ_QUEUE:-hub};
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: hub-secret
        - configMapRef:
            name: hub-config
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-hub:bf05deb-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-hub
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          mkdir -p /etc/tls;
          echo $AMQP_TLS_CERT | base64 --decode | tee /etc/tls/client_cert.pem;
          echo $AMQP_TLS_KEY | base64 --decode | tee /etc/tls/client_key.pem;
          echo $AMQP_TLS_CA_CERTIFICATES | base64 --decode | tee /etc/tls/cacert.pem;
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: debian:10
        name: tls-rabbitmq
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
      serviceAccountName: wait4job
      volumes:
      - emptyDir: {}
        name: tls-rabbitmq
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-hub-drain
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-hub-drain
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-hub-drain
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/hub-config: 09d295d879962e1150466167436516619c003e3f45984ffa032706101393facc
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-hub-drain
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je bin/hub drain;
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: hub-secret
        - configMapRef:
            name: hub-config
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-hub:bf05deb-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-hub
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          mkdir -p /etc/tls;
          echo $AMQP_TLS_CERT | base64 --decode | tee /etc/tls/client_cert.pem;
          echo $AMQP_TLS_KEY | base64 --decode | tee /etc/tls/client_key.pem;
          echo $AMQP_TLS_CA_CERTIFICATES | base64 --decode | tee /etc/tls/cacert.pem;
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: debian:10
        name: tls-rabbitmq
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
      serviceAccountName: wait4job
      volumes:
      - emptyDir: {}
        name: tls-rabbitmq
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-hub-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-hub-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-hub-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/hub-config: 09d295d879962e1150466167436516619c003e3f45984ffa032706101393facc
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-hub-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je bin/server;
        command:
        - /bin/sh
        - -c
        env:
        - name: JWT_RSA_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              key: pub_key
              name: jwt-key-secret
        envFrom:
        - secretRef:
            name: hub-secret
        - configMapRef:
            name: hub-config
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-hub:bf05deb-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-hub
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          mkdir -p /etc/tls;
          echo $AMQP_TLS_CERT | base64 --decode | tee /etc/tls/client_cert.pem;
          echo $AMQP_TLS_KEY | base64 --decode | tee /etc/tls/client_key.pem;
          echo $AMQP_TLS_CA_CERTIFICATES | base64 --decode | tee /etc/tls/cacert.pem;
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: debian:10
        name: tls-rabbitmq
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
      serviceAccountName: wait4job
      volumes:
      - emptyDir: {}
        name: tls-rabbitmq
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-insights
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-insights
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-insights
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/insights-config: fd1e8ac19c7af596101b272affe2e10a0b0cd098518778caccdd2ebb3337e340
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-insights
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je ./bin/server
        command:
        - /bin/sh
        - -c
        env:
        - name: TRAVIS_API_DISABLE_SSL
          value: "true"
        envFrom:
        - configMapRef:
            name: travis-insights
        - secretRef:
            name: insights-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-insights:1211482-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 5
        name: travis-insights
        ports:
        - containerPort: 5555
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http
          timeoutSeconds: 5
      - args:
        - bundle exec je ./bin/sidekiq insights
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: travis-insights
        - secretRef:
            name: insights-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-insights:1211482-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-insights-sidekiq
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: insights-migrations-1211482-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-listener
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-listener
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-listener
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/listener-config: 20d88be151faaf2b1ccba1aae8cf96752292f37983ac46fa126fb889690299ac
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-listener
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec puma -C config/puma.rb
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: listener-config
        - secretRef:
            name: listener-secret
        image: quay.io/travisci/travis-listener:4e02512-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /uptime
            port: http-listener
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: travis-listener
        ports:
        - containerPort: 3000
          name: http-listener
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          httpGet:
            path: /uptime
            port: http-listener
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-live
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-live
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-live
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/live-config: 784f66f1b74ff7e9a244d8022b8d1b14c864a4c45093cf3e7f866edb8f562e8f
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-live
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec je sidekiq -c 25 -r ./lib/travis/live/pusher.rb -q pusher-live
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: live-config
        image: quay.io/travisci/travis-live:4f5cb0b-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-live
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-aggregate-sweeper
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-aggregate-sweeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-aggregate-sweeper
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-aggregate-sweeper
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs aggregate_sweeper
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-logs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-drain
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-drain
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-drain
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-drain
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs drain
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-logs
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          mkdir -p /etc/tls;
          echo $AMQP_TLS_CERT | base64 --decode | tee /etc/tls/client_cert.pem;
          echo $AMQP_TLS_KEY | base64 --decode | tee /etc/tls/client_key.pem;
          echo $AMQP_TLS_CA_CERTIFICATES | base64 --decode | tee /etc/tls/cacert.pem;
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: debian:10
        name: tls-rabbitmq
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
      serviceAccountName: wait4job
      volumes:
      - emptyDir: {}
        name: tls-rabbitmq
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs web
        command:
        - /bin/sh
        - -c
        env:
        - name: JWT_RSA_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              key: pub_key
              name: jwt-key-secret
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-logs
          timeoutSeconds: 5
        name: travis-logs
        ports:
        - containerPort: 5555
          name: http-logs
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-logs
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-worker-critical
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-worker-critical
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-worker-critical
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-worker-critical
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs worker_critical
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-logs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-worker-high
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-worker-high
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-worker-high
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-worker-high
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs worker_high
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-logs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-logs-worker-low
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-logs-worker-low
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-logs-worker-low
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/logs-config: 3ea4ff5787fa4adc06a7b317bc23f3976720b9020da842616eddeaef4b1295a8
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-logs-worker-low
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./script/run-travis-logs worker_low
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: logs-config
        - secretRef:
            name: logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-logs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-logs-16cbc96-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-scheduler
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-scheduler
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/scheduler-config: f8a584c0ecbead2b6a24f38f8055625918dba7d497b738a6ac42e56941956584
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-scheduler
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec bin/sidekiq-pgbouncer ${SIDEKIQ_CONCURRENCY:-5} ${SIDEKIQ_QUEUE:-scheduler}
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: scheduler-config
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-scheduler:103c799-e30-forkfix
        imagePullPolicy: IfNotPresent
        name: travis-scheduler
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - "gem install bunny --version \">= 2.17.0\"\nrubycheck=\"$( cat <<-'EOF'\nrequire
          'bunny'\nrequire 'logger'\nrequire 'fileutils'\nrequire 'base64'\n@error_log
          = Logger.new(STDERR)\nconn = {\n  :host      => \"travisci-platform-rabbitmq-ha\",\n
          \ :port      => 5672,\n  :tls       => false,\n  :vhost     => \"travis\",\n
          \ :user      => \"travis\",\n  :pass      => ENV['AMQP_SECRET']\n}\n\nif
          ENV['AMQP_PROTOCOL'].include? 'amqps'\n  conn[:tls] = true\n  conn[:verify_peer]
          = true\n  FileUtils.mkdir_p \"/etc/tls\"\n  \n  \n  \nend\n\nbegin\n  retries
          ||= 0\n  puts \"waiting for rabbitmq, try ##{ retries }\"\n  connection
          = Bunny.new(conn)\n  connection.start\n  connection.close\nrescue StandardError
          => e\n  sleep 5\n  @error_log.error(e.message)\n  retry if (retries += 1)\nend\nEOF\n)\"\nruby
          <(echo \"$rubycheck\")\n"
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: ruby:3.0.0
        name: check-rabbitmq-ready
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      - args:
        - |
          mkdir -p /etc/tls;
          echo $AMQP_TLS_CERT | base64 --decode | tee /etc/tls/client_cert.pem;
          echo $AMQP_TLS_KEY | base64 --decode | tee /etc/tls/client_key.pem;
          echo $AMQP_TLS_CA_CERTIFICATES | base64 --decode | tee /etc/tls/cacert.pem;
        command:
        - /bin/bash
        - -c
        env:
        - name: AMQP_PROTOCOL
          value: amqp
        - name: AMQP_TLS_CERT
          value: null
        - name: AMQP_TLS_CA_CERTIFICATES
          value: null
        envFrom:
        - secretRef:
            name: wait4rabbit-secret
        image: debian:10
        name: tls-rabbitmq
        volumeMounts:
        - mountPath: /etc/tls
          name: tls-rabbitmq
      serviceAccountName: wait4job
      volumes:
      - emptyDir: {}
        name: tls-rabbitmq
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-tasks
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-tasks
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-tasks
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/task-config: 5a2d1db8829f4d5eb87e6d151c73c7041bfd928bf80de0de4a626a840c625e74
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-tasks
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./bin/travis-tasks-sidekiq --except github
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: tasks-config
        - secretRef:
            name: tasks-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-tasks:8a35191-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-tasks
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-tasks-github
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-tasks-github
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-tasks-github
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/task-config: 5a2d1db8829f4d5eb87e6d151c73c7041bfd928bf80de0de4a626a840c625e74
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-tasks-github
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ./bin/travis-tasks-sidekiq --only github
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: tasks-config
        - secretRef:
            name: tasks-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-tasks:8a35191-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-tasks
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs-listener-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-vcs-listener-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-vcs-listener-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/vcs-listener-config: 3f9907d5fd1e0e1fff1e5d3f8e929627f860bc2e699c59bf65ecb54cb59f1352
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-vcs-listener-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bin/rails server
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: vcs-listener-config
        - secretRef:
            name: vcs-listener-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-vcs-listener:947974b-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: vcs-listener
          timeoutSeconds: 5
        name: travis-vcs-listener
        ports:
        - containerPort: 3000
          name: vcs-listener
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: vcs-listener
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs-listener-worker
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-vcs-listener-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-vcs-listener-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/vcs-listener-config: 3f9907d5fd1e0e1fff1e5d3f8e929627f860bc2e699c59bf65ecb54cb59f1352
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-vcs-listener-worker
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec sidekiq -q $DEFAULT_QUEUE_NAME
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: vcs-listener-config
        - secretRef:
            name: vcs-listener-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-vcs-listener:947974b-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-vcs-listener
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          PASSWORD_PARAM="-a $REDIS_PASSWORD"
          if [ -z $REDIS_PASSWORD ]; then
                PASSWORD_PARAM=""
          fi
          until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
          do
            echo waiting for redis;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        envFrom:
        - secretRef:
            name: wait4redis-secret
        image: bitnami/redis:6.0
        name: check-redis-ready
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-vcs-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-vcs-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/vcs-config: 9dbfa82b52edf6ebbc4f94bcfe784d3c3ba84c14e33457a604f2cc54652d801a
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-vcs-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bin/rails server
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: vcs-config
        - secretRef:
            name: vcs-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-vcs:ceb5d9d-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-vcs
          timeoutSeconds: 5
        name: travis-vcs
        ports:
        - containerPort: 3030
          name: http-vcs
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-vcs
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-vcs-worker
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-vcs-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-vcs-worker
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/vcs-config: 9dbfa82b52edf6ebbc4f94bcfe784d3c3ba84c14e33457a604f2cc54652d801a
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-vcs-worker
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec sidekiq -q $DEFAULT_QUEUE_NAME
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: vcs-config
        - secretRef:
            name: vcs-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-vcs:ceb5d9d-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-vcs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - |
          until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
          do
            echo waiting for database migration;
            sleep 2;
          done
        command:
        - /bin/sh
        - -c
        env:
        - name: MIGRATION_JOB
          value: travis-migrations-7f9f140-enterprise-3.0
        - name: APISERVER
          value: https://kubernetes.default.svc
        - name: SERVICEACCOUNT
          value: /var/run/secrets/kubernetes.io/serviceaccount
        - name: CACERT
          value: ${SERVICEACCOUNT}/ca.crt
        image: quay.io/travisci/tiny-tools:latest
        name: check-migrations-ready
      serviceAccountName: wait4job
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-web
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-web
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/web-config: 85e7150717711e034f191bd624a294141a6b5227b0c7356d7c92ec80b5167184
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-web
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec puma -I lib -p ${PORT:-4000} -t ${PUMA_MIN_THREADS:-8}:${PUMA_MAX_THREADS:-12}
          -w ${PUMA_WORKERS:-2} --preload waiter/config.ru
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: travis-web
        - secretRef:
            name: web-secret
        image: quay.io/travisci/travis-web:a8df3a3-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-web
          timeoutSeconds: 5
        name: travis-web
        ports:
        - containerPort: 8080
          name: http-web
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-web
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-yml
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: travis-yml
spec:
  replicas: 1
  selector:
    matchLabels:
      app: travis-yml
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        checksum/travis-config-secret: b32628e073e7db9006fa3ce4df30ee4d125d2be9f585a45bd546f78891d8fac1
        checksum/yml-config: 8503ef44845523b83bc72e2dfe4db67baf0fc3c4e16c30d1a975f38f11a329a0
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: travis-yml
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: yml-config
        image: quay.io/travisci/travis-yml:c29bb2e-enterprise-3.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-yml
          timeoutSeconds: 5
        name: travis-yml
        ports:
        - containerPort: 3000
          name: http-yml
          protocol: TCP
        readinessProbe:
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: http-yml
          timeoutSeconds: 5
        volumeMounts:
        - mountPath: /app/config/travis.yml
          name: travis-config
          subPath: travis.yml
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      volumes:
      - name: travis-config
        secret:
          items:
          - key: travis.yml
            path: travis.yml
          secretName: travis-config-secret
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: rabbitmq-ha
    chart: rabbitmq-ha-1.46.0
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-rabbitmq-ha
  namespace: tci-enterprise-kots
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq-ha
      release: travisci-platform
  serviceName: travisci-platform-rabbitmq-ha-discovery
  template:
    metadata:
      annotations:
        checksum/config: b8703bc14c99ab7f16db675dd21f588fa963962d645cda72477b7b986640b9de
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: rabbitmq-ha
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        release: travisci-platform
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: rabbitmq-ha
                  release: travisci-platform
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_NODENAME
          value: rabbit@$(MY_POD_NAME).travisci-platform-rabbitmq-ha-discovery.tci-enterprise-kots.svc.cluster.local
        - name: K8S_HOSTNAME_SUFFIX
          value: .travisci-platform-rabbitmq-ha-discovery.tci-enterprise-kots.svc.cluster.local
        - name: K8S_SERVICE_NAME
          value: travisci-platform-rabbitmq-ha-discovery
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              key: rabbitmq-erlang-cookie
              name: rabbitmq-secret
        - name: RABBIT_MANAGEMENT_USER
          valueFrom:
            secretKeyRef:
              key: rabbitmq-management-username
              name: rabbitmq-secret
        - name: RABBIT_MANAGEMENT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: rabbitmq-management-password
              name: rabbitmq-secret
        image: rabbitmq:3.8.0-alpine
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - 'timeout 5 wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
              | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
          failureThreshold: 6
          initialDelaySeconds: 120
          periodSeconds: 10
          timeoutSeconds: 5
        name: rabbitmq-ha
        ports:
        - containerPort: 4369
          name: epmd
          protocol: TCP
        - containerPort: 5672
          name: amqp
          protocol: TCP
        - containerPort: 15672
          name: http
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - 'timeout 3 wget -O - -q --header "Authorization: Basic `echo -n \"$RABBIT_MANAGEMENT_USER:$RABBIT_MANAGEMENT_PASSWORD\"
              | base64`" http://localhost:15672/api/healthchecks/node | grep -qF "{\"status\":\"ok\"}"'
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 5
          timeoutSeconds: 3
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/rabbitmq
          name: data
        - mountPath: /etc/rabbitmq
          name: config
        - mountPath: /etc/definitions
          name: definitions
          readOnly: true
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - args:
        - -c
        - |
          set -ex
          cp /configmap/* /etc/rabbitmq
          echo "${RABBITMQ_ERLANG_COOKIE}" > /var/lib/rabbitmq/.erlang.cookie
          chown -R 100:101 /var/lib/rabbitmq/
          chown -R 100:101 /etc/rabbitmq
        command:
        - sh
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: RABBITMQ_MNESIA_DIR
          value: /var/lib/rabbitmq/mnesia/rabbit@$(POD_NAME).travisci-platform-rabbitmq-ha-discovery.tci-enterprise-kots.svc.cluster.local
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              key: rabbitmq-erlang-cookie
              name: rabbitmq-secret
        image: busybox:1.30.1
        imagePullPolicy: IfNotPresent
        name: bootstrap
        resources: {}
        securityContext:
          runAsGroup: 0
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - mountPath: /configmap
          name: configmap
        - mountPath: /etc/rabbitmq
          name: config
        - mountPath: /var/lib/rabbitmq
          name: data
      securityContext:
        fsGroup: 101
        runAsGroup: 101
        runAsNonRoot: true
        runAsUser: 100
      serviceAccountName: travisci-platform-rabbitmq-ha
      terminationGracePeriodSeconds: 10
      volumes:
      - emptyDir: {}
        name: config
      - configMap:
          name: travisci-platform-rabbitmq-ha
        name: configmap
      - name: definitions
        secret:
          items:
          - key: definitions.json
            path: definitions.json
          secretName: rabbitmq-secret
      - emptyDir: {}
        name: data
  updateStrategy:
    type: OnDelete
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: redis
    chart: redis-10.6.18
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-redis-master
  namespace: tci-enterprise-kots
spec:
  selector:
    matchLabels:
      app: redis
      release: travisci-platform
      role: master
  serviceName: travisci-platform-redis-headless
  template:
    metadata:
      annotations:
        checksum/configmap: 4b55e88bff0a48a1030fa276dc3a9fcce75e53471ca52ec006244b71446a2b76
        checksum/health: 9cc588c7ece78c0d5085c210c4892fe8fbac8243f08f33cba663f1c39a049b2e
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: redis
        chart: redis-10.6.18
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        release: travisci-platform
        role: master
    spec:
      containers:
      - command:
        - /bin/bash
        - -c
        - |
          if [[ -n $REDIS_PASSWORD_FILE ]]; then
            password_aux=`cat ${REDIS_PASSWORD_FILE}`
            export REDIS_PASSWORD=$password_aux
          fi
          if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
          fi
          if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
            cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
          fi
          ARGS=("--port" "${REDIS_PORT}")
          ARGS+=("--requirepass" "${REDIS_PASSWORD}")
          ARGS+=("--masterauth" "${REDIS_PASSWORD}")
          ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
          ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
          /run.sh ${ARGS[@]}
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              key: redis-password
              name: redis-secret
        - name: REDIS_PORT
          value: "6379"
        image: docker.io/bitnami/redis:6.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_liveness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        name: redis
        ports:
        - containerPort: 6379
          name: redis
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - /health/ping_readiness_local.sh 5
          failureThreshold: 5
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources: null
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /health
          name: health
        - mountPath: /data
          name: redis-data
          subPath: null
        - mountPath: /opt/bitnami/redis/mounted-etc
          name: config
        - mountPath: /opt/bitnami/redis/etc/
          name: redis-tmp-conf
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      securityContext:
        fsGroup: 1001
      serviceAccountName: default
      volumes:
      - configMap:
          defaultMode: 493
          name: travisci-platform-redis-health
        name: health
      - configMap:
          name: travisci-platform-redis
        name: config
      - emptyDir: {}
        name: redis-tmp-conf
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      labels:
        app: redis
        component: master
        heritage: Helm
        release: travisci-platform
      name: redis-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
      selector: null
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: insights-postgresql
    chart: insights-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-insights-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: insights-postgresql
      release: travisci-platform
      role: master
  serviceName: travisci-platform-insights-postgresql-headless
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: insights-postgresql
        chart: insights-postgresql-8.10.5
        heritage: Helm
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        release: travisci-platform
        role: master
      name: travisci-platform-insights-postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql-insights
        - name: POSTGRES_DB
          value: travis_insights_production
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        image: docker.io/bitnami/postgresql:11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -d "travis_insights_production" -h 127.0.0.1
              -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: travisci-platform-insights-postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "postgres" -d "travis_insights_production" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      securityContext:
        fsGroup: 1001
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: logs-postgresql
    chart: logs-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-logs-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logs-postgresql
      release: travisci-platform
      role: master
  serviceName: travisci-platform-logs-postgresql-headless
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: logs-postgresql
        chart: logs-postgresql-8.10.5
        heritage: Helm
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        release: travisci-platform
        role: master
      name: travisci-platform-logs-postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql-logs
        - name: POSTGRES_DB
          value: logsdb
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        image: docker.io/bitnami/postgresql:11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -d "logsdb" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: travisci-platform-logs-postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "postgres" -d "logsdb" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      securityContext:
        fsGroup: 1001
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: platform-postgresql
    chart: platform-postgresql-8.10.5
    heritage: Helm
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    release: travisci-platform
  name: travisci-platform-platform-postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: platform-postgresql
      release: travisci-platform
      role: master
  serviceName: travisci-platform-platform-postgresql-headless
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        app: platform-postgresql
        chart: platform-postgresql-8.10.5
        heritage: Helm
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        release: travisci-platform
        role: master
      name: travisci-platform-platform-postgresql
    spec:
      containers:
      - env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: /bitnami/postgresql
        - name: PGDATA
          value: /bitnami/postgresql/data
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgresql-password
              name: postgresql-platform
        - name: POSTGRES_DB
          value: platformdb
        - name: POSTGRESQL_ENABLE_LDAP
          value: "no"
        image: docker.io/bitnami/postgresql:11
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "postgres" -d "platformdb" -h 127.0.0.1 -p 5432
          failureThreshold: 6
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: travisci-platform-platform-postgresql
        ports:
        - containerPort: 5432
          name: tcp-postgresql
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - -e
            - |
              exec pg_isready -U "postgres" -d "platformdb" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          failureThreshold: 6
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /bitnami/postgresql
          name: data
          subPath: null
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      securityContext:
        fsGroup: 1001
      volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 1Gi
        name: dshm
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-github-sync
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: cron-schedule-repos
spec:
  jobTemplate:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
    spec:
      template:
        metadata:
          annotations:
            kots.io/app-slug: tci-enterprise-kots
          labels:
            app: travis-github-sync
            kots.io/app-slug: tci-enterprise-kots
            kots.io/backup: velero
            project: travis
        spec:
          containers:
          - args:
            - bundle exec je bin/schedule branches --hours 24 --active
            command:
            - /bin/sh
            - -c
            - --
            envFrom:
            - configMapRef:
                name: travis-github-sync
            - secretRef:
                name: github-sync-secret
            image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-github-sync:5479c9c-enterprise-3.0
            imagePullPolicy: IfNotPresent
            name: cron-schedule-repos
            volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
              name: cert-pem
              subPath: custom_cert.crt
            - mountPath: /app/config/travis.yml
              name: travis-config
              subPath: travis.yml
          imagePullSecrets:
          - name: tci-enterprise-kots-registry
          - name: imagepull-secret
          initContainers:
          - args:
            - |
              PASSWORD_PARAM="-a $REDIS_PASSWORD"
              if [ -z $REDIS_PASSWORD ]; then
                    PASSWORD_PARAM=""
              fi
              until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
              do
                echo waiting for redis;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            envFrom:
            - secretRef:
                name: wait4redis-secret
            image: bitnami/redis:6.0
            name: check-redis-ready
          - args:
            - |
              until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
              do
                echo waiting for database migration;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            env:
            - name: MIGRATION_JOB
              value: travis-migrations-7f9f140-enterprise-3.0
            - name: APISERVER
              value: https://kubernetes.default.svc
            - name: SERVICEACCOUNT
              value: /var/run/secrets/kubernetes.io/serviceaccount
            - name: CACERT
              value: ${SERVICEACCOUNT}/ca.crt
            image: quay.io/travisci/tiny-tools:latest
            name: check-migrations-ready
          restartPolicy: OnFailure
          serviceAccountName: wait4job
          volumes:
          - configMap:
              name: certpem-config
            name: cert-pem
          - name: travis-config
            secret:
              items:
              - key: travis.yml
                path: travis.yml
              secretName: travis-config-secret
  schedule: 1 1 * * *
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-github-sync
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: cron-schedule-users
spec:
  jobTemplate:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
    spec:
      template:
        metadata:
          annotations:
            kots.io/app-slug: tci-enterprise-kots
          labels:
            app: travis-github-sync
            kots.io/app-slug: tci-enterprise-kots
            kots.io/backup: velero
            project: travis
        spec:
          containers:
          - args:
            - bundle exec je bin/schedule users    --hours 24 --valid --active --days
              30
            command:
            - /bin/sh
            - -c
            - --
            envFrom:
            - configMapRef:
                name: travis-github-sync
            - secretRef:
                name: github-sync-secret
            image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-github-sync:5479c9c-enterprise-3.0
            imagePullPolicy: IfNotPresent
            name: cron-schedule-users
            volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
              name: cert-pem
              subPath: custom_cert.crt
            - mountPath: /app/config/travis.yml
              name: travis-config
              subPath: travis.yml
          imagePullSecrets:
          - name: tci-enterprise-kots-registry
          - name: imagepull-secret
          initContainers:
          - args:
            - |
              PASSWORD_PARAM="-a $REDIS_PASSWORD"
              if [ -z $REDIS_PASSWORD ]; then
                    PASSWORD_PARAM=""
              fi
              until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
              do
                echo waiting for redis;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            envFrom:
            - secretRef:
                name: wait4redis-secret
            image: bitnami/redis:6.0
            name: check-redis-ready
          - args:
            - |
              until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
              do
                echo waiting for database migration;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            env:
            - name: MIGRATION_JOB
              value: travis-migrations-7f9f140-enterprise-3.0
            - name: APISERVER
              value: https://kubernetes.default.svc
            - name: SERVICEACCOUNT
              value: /var/run/secrets/kubernetes.io/serviceaccount
            - name: CACERT
              value: ${SERVICEACCOUNT}/ca.crt
            image: quay.io/travisci/tiny-tools:latest
            name: check-migrations-ready
          restartPolicy: OnFailure
          serviceAccountName: wait4job
          volumes:
          - configMap:
              name: certpem-config
            name: cert-pem
          - name: travis-config
            secret:
              items:
              - key: travis.yml
                path: travis.yml
              secretName: travis-config-secret
  schedule: 1 0 * * 0-5
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    app: travis-github-sync
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
    project: travis
  name: cron-schedule-users-full
spec:
  jobTemplate:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
    spec:
      template:
        metadata:
          annotations:
            kots.io/app-slug: tci-enterprise-kots
          labels:
            app: travis-github-sync
            kots.io/app-slug: tci-enterprise-kots
            kots.io/backup: velero
            project: travis
        spec:
          containers:
          - args:
            - bundle exec je bin/schedule users    --hours 24 --valid
            command:
            - /bin/sh
            - -c
            - --
            envFrom:
            - configMapRef:
                name: travis-github-sync
            - secretRef:
                name: github-sync-secret
            image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-github-sync:5479c9c-enterprise-3.0
            imagePullPolicy: IfNotPresent
            name: cron-schedule-users-full
            volumeMounts:
            - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
              name: cert-pem
              subPath: custom_cert.crt
            - mountPath: /app/config/travis.yml
              name: travis-config
              subPath: travis.yml
          imagePullSecrets:
          - name: tci-enterprise-kots-registry
          - name: imagepull-secret
          initContainers:
          - args:
            - |
              PASSWORD_PARAM="-a $REDIS_PASSWORD"
              if [ -z $REDIS_PASSWORD ]; then
                    PASSWORD_PARAM=""
              fi
              until [ `redis-cli $PASSWORD_PARAM --no-auth-warning -h travisci-platform-redis-headless -p 6379 ping` = 'PONG' ];
              do
                echo waiting for redis;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            envFrom:
            - secretRef:
                name: wait4redis-secret
            image: bitnami/redis:6.0
            name: check-redis-ready
          - args:
            - |
              until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
              do
                echo waiting for database migration;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            env:
            - name: MIGRATION_JOB
              value: travis-migrations-7f9f140-enterprise-3.0
            - name: APISERVER
              value: https://kubernetes.default.svc
            - name: SERVICEACCOUNT
              value: /var/run/secrets/kubernetes.io/serviceaccount
            - name: CACERT
              value: ${SERVICEACCOUNT}/ca.crt
            image: quay.io/travisci/tiny-tools:latest
            name: check-migrations-ready
          restartPolicy: OnFailure
          serviceAccountName: wait4job
          volumes:
          - configMap:
              name: certpem-config
            name: cert-pem
          - name: travis-config
            secret:
              items:
              - key: travis.yml
                path: travis.yml
              secretName: travis-config-secret
  schedule: 1 0 * * 6
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: insights-cron-job
spec:
  jobTemplate:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
    spec:
      template:
        metadata:
          annotations:
            kots.io/app-slug: tci-enterprise-kots
          labels:
            kots.io/app-slug: tci-enterprise-kots
            kots.io/backup: velero
            project: travis
        spec:
          containers:
          - args:
            - bundle exec bin/run part
            command:
            - /bin/sh
            - -c
            envFrom:
            - secretRef:
                name: insights-secret
            image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-insights:1211482-enterprise-3.0
            imagePullPolicy: IfNotPresent
            name: cron-migrations
          imagePullSecrets:
          - name: tci-enterprise-kots-registry
          - name: imagepull-secret
          initContainers:
          - args:
            - |
              until [ $(curl --cacert ${SERVICEACCOUNT}/ca.crt --header "Authorization: Bearer `cat ${SERVICEACCOUNT}/token`" -X GET ${APISERVER}/apis/batch/v1/namespaces/`cat ${SERVICEACCOUNT}/namespace`/jobs/${MIGRATION_JOB}/status | jq -r '.status.succeeded') = "1" ];
              do
                echo waiting for database migration;
                sleep 2;
              done
            command:
            - /bin/sh
            - -c
            env:
            - name: MIGRATION_JOB
              value: insights-migrations-1211482-enterprise-3.0
            - name: APISERVER
              value: https://kubernetes.default.svc
            - name: SERVICEACCOUNT
              value: /var/run/secrets/kubernetes.io/serviceaccount
            - name: CACERT
              value: ${SERVICEACCOUNT}/ca.crt
            image: quay.io/travisci/tiny-tools:latest
            name: check-migrations-ready
          restartPolicy: Never
          serviceAccountName: wait4job
  schedule: 0 * * * *
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: insights-migrations-1211482-enterprise-3.0
spec:
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - bundle exec rake db:migrate && bundle exec bin/run part
        command:
        - /bin/sh
        - -c
        env:
        - name: RACK_ENV
          value: production
        envFrom:
        - secretRef:
            name: insights-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-insights:1211482-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-insights-migrations
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - command:
        - sh
        - /usr/local/bin/pg_wait.sh
        envFrom:
        - configMapRef:
            name: insights-db-config
        image: docker.io/bitnami/postgresql:11.6.0
        name: check-db-ready
        volumeMounts:
        - mountPath: /usr/local/bin/pg_wait.sh
          name: pg-wait
          subPath: pg_wait.sh
      restartPolicy: Never
      volumes:
      - configMap:
          items:
          - key: pg_wait.sh
            path: pg_wait.sh
          name: pg-wait-config
        name: pg-wait
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-migrations-7f9f140-enterprise-3.0
spec:
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ' bundle exec rake db:migrate;'
        command:
        - /bin/sh
        - -c
        env:
        - name: RACK_ENV
          value: production
        - name: ENV
          value: production
        envFrom:
        - configMapRef:
            name: platform-db-config
        - secretRef:
            name: migrations-secret
        image: proxy.replicated.com/proxy/tci-enterprise-kots/quay.io/travisci/travis-migrations:7f9f140-enterprise-3.0
        imagePullPolicy: Always
        name: travis-migrations
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /travis-migrations/script/platform_sql_schema_22.sh
          name: migrations-dump-schema-22
          subPath: platform_sql_schema_22.sh
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      - name: imagepull-secret
      initContainers:
      - command:
        - sh
        - /usr/local/bin/pg_wait.sh
        env:
        - name: RACK_ENV
          value: production
        - name: ENV
          value: production
        envFrom:
        - configMapRef:
            name: platform-db-config
        - secretRef:
            name: migrations-secret
        image: docker.io/bitnami/postgresql:11.6.0
        name: check-db-ready
        volumeMounts:
        - mountPath: /usr/local/bin/pg_wait.sh
          name: pg-wait
          subPath: pg_wait.sh
      restartPolicy: Never
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - configMap:
          items:
          - key: pg_wait.sh
            path: pg_wait.sh
          name: pg-wait-config
        name: pg-wait
      - configMap:
          defaultMode: 511
          items:
          - key: platform_sql_schema_22.sh
            path: platform_sql_schema_22.sh
          name: migrations-config
        name: migrations-dump-schema-22
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: travis-migrations-logs-16cbc96-enterprise-3.0
spec:
  template:
    metadata:
      annotations:
        kots.io/app-slug: tci-enterprise-kots
      labels:
        kots.io/app-slug: tci-enterprise-kots
        kots.io/backup: velero
        project: travis
    spec:
      containers:
      - args:
        - ' echo "Run enterprise-migrations"; ./script/enterprise-migrations;'
        command:
        - /bin/sh
        - -c
        envFrom:
        - configMapRef:
            name: migrations-logs-config
        - secretRef:
            name: migrations-logs-secret
        image: quay.io/travisci/travis-logs:16cbc96-enterprise-3.0
        imagePullPolicy: IfNotPresent
        name: travis-migrations-logs
        volumeMounts:
        - mountPath: /usr/local/share/ca-certificates/custom_cert.crt
          name: cert-pem
          subPath: custom_cert.crt
        - mountPath: /app/script/log_sql_schema_22.sh
          name: migrations-logs-dump-schema-22
          subPath: log_sql_schema_22.sh
      imagePullSecrets:
      - name: tci-enterprise-kots-registry
      initContainers:
      - command:
        - sh
        - /usr/local/bin/pg_wait.sh
        envFrom:
        - configMapRef:
            name: logs-db-config
        image: docker.io/bitnami/postgresql:11.6.0
        name: check-db-ready
        volumeMounts:
        - mountPath: /usr/local/bin/pg_wait.sh
          name: pg-wait
          subPath: pg_wait.sh
      restartPolicy: Never
      volumes:
      - configMap:
          name: certpem-config
        name: cert-pem
      - configMap:
          items:
          - key: pg_wait.sh
            path: pg_wait.sh
          name: pg-wait-config
        name: pg-wait
      - configMap:
          defaultMode: 511
          items:
          - key: log_sql_schema_22.sh
            path: log_sql_schema_22.sh
          name: migrations-logs-config
        name: migrations-logs-dump-schema-22
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: nginx-backendconfig
spec:
  timeoutSec: 86400
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    kots.io/app-slug: tci-enterprise-kots
  labels:
    kots.io/app-slug: tci-enterprise-kots
    kots.io/backup: velero
  name: letsencrypt-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Mi
  volumeMode: Filesystem
